/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const RST_vect: u32 = 0;
pub const INTDBG_vect: u32 = 2;
pub const INTWDTI_vect: u32 = 4;
pub const INTLVI_vect: u32 = 6;
pub const INTP0_vect: u32 = 8;
pub const INTP1_vect: u32 = 10;
pub const INTP2_vect: u32 = 12;
pub const INTP3_vect: u32 = 14;
pub const INTP4_vect: u32 = 16;
pub const INTP5_vect: u32 = 18;
pub const INTCSI20_vect: u32 = 20;
pub const INTIIC20_vect: u32 = 20;
pub const INTST2_vect: u32 = 20;
pub const INTCSI21_vect: u32 = 22;
pub const INTIIC21_vect: u32 = 22;
pub const INTSR2_vect: u32 = 22;
pub const INTSRE2_vect: u32 = 24;
pub const INTTM11H_vect: u32 = 24;
pub const INTDMA0_vect: u32 = 26;
pub const INTDMA1_vect: u32 = 28;
pub const INTCSI00_vect: u32 = 30;
pub const INTIIC00_vect: u32 = 30;
pub const INTST0_vect: u32 = 30;
pub const INTCSI01_vect: u32 = 32;
pub const INTIIC01_vect: u32 = 32;
pub const INTSR0_vect: u32 = 32;
pub const INTSRE0_vect: u32 = 34;
pub const INTTM01H_vect: u32 = 34;
pub const INTCSI10_vect: u32 = 36;
pub const INTIIC10_vect: u32 = 36;
pub const INTST1_vect: u32 = 36;
pub const INTCSI11_vect: u32 = 38;
pub const INTIIC11_vect: u32 = 38;
pub const INTSR1_vect: u32 = 38;
pub const INTSRE1_vect: u32 = 40;
pub const INTTM03H_vect: u32 = 40;
pub const INTIICA0_vect: u32 = 42;
pub const INTTM00_vect: u32 = 44;
pub const INTTM01_vect: u32 = 46;
pub const INTTM02_vect: u32 = 48;
pub const INTTM03_vect: u32 = 50;
pub const INTAD_vect: u32 = 52;
pub const INTRTC_vect: u32 = 54;
pub const INTIT_vect: u32 = 56;
pub const INTKR_vect: u32 = 58;
pub const INTCSI30_vect: u32 = 60;
pub const INTIIC30_vect: u32 = 60;
pub const INTST3_vect: u32 = 60;
pub const INTCSI31_vect: u32 = 62;
pub const INTIIC31_vect: u32 = 62;
pub const INTSR3_vect: u32 = 62;
pub const INTTM13_vect: u32 = 64;
pub const INTTM04_vect: u32 = 66;
pub const INTTM05_vect: u32 = 68;
pub const INTTM06_vect: u32 = 70;
pub const INTTM07_vect: u32 = 72;
pub const INTP6_vect: u32 = 74;
pub const INTP7_vect: u32 = 76;
pub const INTP8_vect: u32 = 78;
pub const INTP9_vect: u32 = 80;
pub const INTP10_vect: u32 = 82;
pub const INTP11_vect: u32 = 84;
pub const INTTM10_vect: u32 = 86;
pub const INTTM11_vect: u32 = 88;
pub const INTTM12_vect: u32 = 90;
pub const INTSRE3_vect: u32 = 92;
pub const INTTM13H_vect: u32 = 92;
pub const INTMD_vect: u32 = 94;
pub const INTIICA1_vect: u32 = 96;
pub const INTFL_vect: u32 = 98;
pub const INTDMA2_vect: u32 = 100;
pub const INTDMA3_vect: u32 = 102;
pub const INTTM14_vect: u32 = 104;
pub const INTTM15_vect: u32 = 106;
pub const INTTM16_vect: u32 = 108;
pub const INTTM17_vect: u32 = 110;
pub const BRK_I_vect: u32 = 126;
pub const OPTION_BYTES_vect: u32 = 192;
pub const SECURITY_ID_vect: u32 = 196;
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p0 {
    pub p0: cty::c_uchar,
    pub BIT: un_p0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p0__bindgen_ty_1))
    );
}
impl un_p0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p0() {
    assert_eq!(
        ::core::mem::size_of::<un_p0>(),
        1usize,
        concat!("Size of: ", stringify!(un_p0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p0>())).p0 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p0), "::", stringify!(p0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p1 {
    pub p1: cty::c_uchar,
    pub BIT: un_p1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p1__bindgen_ty_1))
    );
}
impl un_p1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p1() {
    assert_eq!(
        ::core::mem::size_of::<un_p1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p1>())).p1 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p1), "::", stringify!(p1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p2 {
    pub p2: cty::c_uchar,
    pub BIT: un_p2__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p2__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p2__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p2__bindgen_ty_1))
    );
}
impl un_p2__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p2() {
    assert_eq!(
        ::core::mem::size_of::<un_p2>(),
        1usize,
        concat!("Size of: ", stringify!(un_p2))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p2>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p2>())).p2 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p2), "::", stringify!(p2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p2>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p2),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p3 {
    pub p3: cty::c_uchar,
    pub BIT: un_p3__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p3__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p3__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p3__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p3__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p3__bindgen_ty_1))
    );
}
impl un_p3__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p3() {
    assert_eq!(
        ::core::mem::size_of::<un_p3>(),
        1usize,
        concat!("Size of: ", stringify!(un_p3))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p3>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p3>())).p3 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p3), "::", stringify!(p3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p3>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p3),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p4 {
    pub p4: cty::c_uchar,
    pub BIT: un_p4__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p4__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p4__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p4__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p4__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p4__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p4__bindgen_ty_1))
    );
}
impl un_p4__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p4() {
    assert_eq!(
        ::core::mem::size_of::<un_p4>(),
        1usize,
        concat!("Size of: ", stringify!(un_p4))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p4>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p4))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p4>())).p4 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p4), "::", stringify!(p4))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p4>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p4),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p5 {
    pub p5: cty::c_uchar,
    pub BIT: un_p5__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p5__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p5__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p5__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p5__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p5__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p5__bindgen_ty_1))
    );
}
impl un_p5__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p5() {
    assert_eq!(
        ::core::mem::size_of::<un_p5>(),
        1usize,
        concat!("Size of: ", stringify!(un_p5))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p5>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p5))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p5>())).p5 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p5), "::", stringify!(p5))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p5>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p5),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p6 {
    pub p6: cty::c_uchar,
    pub BIT: un_p6__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p6__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p6__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p6__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p6__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p6__bindgen_ty_1))
    );
}
impl un_p6__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p6() {
    assert_eq!(
        ::core::mem::size_of::<un_p6>(),
        1usize,
        concat!("Size of: ", stringify!(un_p6))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p6>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p6))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p6>())).p6 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p6), "::", stringify!(p6))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p6>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p6),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p7 {
    pub p7: cty::c_uchar,
    pub BIT: un_p7__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p7__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p7__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p7__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p7__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p7__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p7__bindgen_ty_1))
    );
}
impl un_p7__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p7() {
    assert_eq!(
        ::core::mem::size_of::<un_p7>(),
        1usize,
        concat!("Size of: ", stringify!(un_p7))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p7>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p7))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p7>())).p7 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p7), "::", stringify!(p7))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p7>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p7),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p8 {
    pub p8: cty::c_uchar,
    pub BIT: un_p8__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p8__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p8__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p8__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p8__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p8__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p8__bindgen_ty_1))
    );
}
impl un_p8__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p8() {
    assert_eq!(
        ::core::mem::size_of::<un_p8>(),
        1usize,
        concat!("Size of: ", stringify!(un_p8))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p8>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p8))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p8>())).p8 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p8), "::", stringify!(p8))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p8>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p8),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p9 {
    pub p9: cty::c_uchar,
    pub BIT: un_p9__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p9__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p9__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p9__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p9__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p9__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p9__bindgen_ty_1))
    );
}
impl un_p9__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p9() {
    assert_eq!(
        ::core::mem::size_of::<un_p9>(),
        1usize,
        concat!("Size of: ", stringify!(un_p9))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p9>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p9))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p9>())).p9 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(un_p9), "::", stringify!(p9))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p9>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p9),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p10 {
    pub p10: cty::c_uchar,
    pub BIT: un_p10__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p10__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p10__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p10__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p10__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p10__bindgen_ty_1))
    );
}
impl un_p10__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p10() {
    assert_eq!(
        ::core::mem::size_of::<un_p10>(),
        1usize,
        concat!("Size of: ", stringify!(un_p10))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p10>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p10))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p10>())).p10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p10),
            "::",
            stringify!(p10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p10>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p10),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p11 {
    pub p11: cty::c_uchar,
    pub BIT: un_p11__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p11__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p11__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p11__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p11__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p11__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p11__bindgen_ty_1))
    );
}
impl un_p11__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p11() {
    assert_eq!(
        ::core::mem::size_of::<un_p11>(),
        1usize,
        concat!("Size of: ", stringify!(un_p11))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p11>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p11))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p11>())).p11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p11),
            "::",
            stringify!(p11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p11>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p11),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p12 {
    pub p12: cty::c_uchar,
    pub BIT: un_p12__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p12__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p12__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p12__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p12__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p12__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p12__bindgen_ty_1))
    );
}
impl un_p12__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p12() {
    assert_eq!(
        ::core::mem::size_of::<un_p12>(),
        1usize,
        concat!("Size of: ", stringify!(un_p12))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p12>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p12))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p12>())).p12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p12),
            "::",
            stringify!(p12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p12>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p12),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p13 {
    pub p13: cty::c_uchar,
    pub BIT: un_p13__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p13__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p13__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p13__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p13__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p13__bindgen_ty_1))
    );
}
impl un_p13__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p13() {
    assert_eq!(
        ::core::mem::size_of::<un_p13>(),
        1usize,
        concat!("Size of: ", stringify!(un_p13))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p13>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p13))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p13>())).p13 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p13),
            "::",
            stringify!(p13)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p13>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p13),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p14 {
    pub p14: cty::c_uchar,
    pub BIT: un_p14__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p14__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p14__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p14__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p14__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p14__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p14__bindgen_ty_1))
    );
}
impl un_p14__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p14() {
    assert_eq!(
        ::core::mem::size_of::<un_p14>(),
        1usize,
        concat!("Size of: ", stringify!(un_p14))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p14>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p14))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p14>())).p14 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p14),
            "::",
            stringify!(p14)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p14>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p14),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_p15 {
    pub p15: cty::c_uchar,
    pub BIT: un_p15__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_p15__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_p15__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_p15__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_p15__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p15__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p15__bindgen_ty_1))
    );
}
impl un_p15__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_p15() {
    assert_eq!(
        ::core::mem::size_of::<un_p15>(),
        1usize,
        concat!("Size of: ", stringify!(un_p15))
    );
    assert_eq!(
        ::core::mem::align_of::<un_p15>(),
        1usize,
        concat!("Alignment of ", stringify!(un_p15))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p15>())).p15 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p15),
            "::",
            stringify!(p15)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_p15>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_p15),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr00 {
    pub sdr00: cty::c_ushort,
    pub BIT: un_sdr00__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr00__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr00__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr00__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr00__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr00__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr00__bindgen_ty_1))
    );
}
impl un_sdr00__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr00() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr00>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr00))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr00>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr00))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr00>())).sdr00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr00),
            "::",
            stringify!(sdr00)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr00>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr00),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio00 {
    pub sio00: cty::c_uchar,
    pub BIT: un_sio00__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio00__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio00__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio00__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio00__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio00__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio00__bindgen_ty_1))
    );
}
impl un_sio00__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio00() {
    assert_eq!(
        ::core::mem::size_of::<un_sio00>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio00))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio00>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio00))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio00>())).sio00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio00),
            "::",
            stringify!(sio00)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio00>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio00),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_txd0 {
    pub txd0: cty::c_uchar,
    pub BIT: un_txd0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_txd0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_txd0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_txd0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd0__bindgen_ty_1))
    );
}
impl un_txd0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_txd0() {
    assert_eq!(
        ::core::mem::size_of::<un_txd0>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd0>())).txd0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd0),
            "::",
            stringify!(txd0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr01 {
    pub sdr01: cty::c_ushort,
    pub BIT: un_sdr01__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr01__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr01__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr01__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr01__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr01__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr01__bindgen_ty_1))
    );
}
impl un_sdr01__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr01() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr01>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr01))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr01>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr01))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr01>())).sdr01 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr01),
            "::",
            stringify!(sdr01)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr01>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr01),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rxd0 {
    pub rxd0: cty::c_uchar,
    pub BIT: un_rxd0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rxd0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rxd0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd0__bindgen_ty_1))
    );
}
impl un_rxd0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rxd0() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd0>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd0>())).rxd0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd0),
            "::",
            stringify!(rxd0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio01 {
    pub sio01: cty::c_uchar,
    pub BIT: un_sio01__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio01__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio01__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio01__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio01__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio01__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio01__bindgen_ty_1))
    );
}
impl un_sio01__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio01() {
    assert_eq!(
        ::core::mem::size_of::<un_sio01>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio01))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio01>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio01))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio01>())).sio01 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio01),
            "::",
            stringify!(sio01)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio01>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio01),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr12 {
    pub sdr12: cty::c_ushort,
    pub BIT: un_sdr12__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr12__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr12__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr12__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr12__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr12__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr12__bindgen_ty_1))
    );
}
impl un_sdr12__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr12() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr12>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr12))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr12>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr12))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr12>())).sdr12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr12),
            "::",
            stringify!(sdr12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr12>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr12),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio30 {
    pub sio30: cty::c_uchar,
    pub BIT: un_sio30__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio30__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio30__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio30__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio30__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio30__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio30__bindgen_ty_1))
    );
}
impl un_sio30__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio30() {
    assert_eq!(
        ::core::mem::size_of::<un_sio30>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio30))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio30>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio30))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio30>())).sio30 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio30),
            "::",
            stringify!(sio30)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio30>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio30),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_txd3 {
    pub txd3: cty::c_uchar,
    pub BIT: un_txd3__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_txd3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_txd3__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_txd3__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd3__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd3__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd3__bindgen_ty_1))
    );
}
impl un_txd3__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_txd3() {
    assert_eq!(
        ::core::mem::size_of::<un_txd3>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd3))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd3>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd3>())).txd3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd3),
            "::",
            stringify!(txd3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd3>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd3),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr13 {
    pub sdr13: cty::c_ushort,
    pub BIT: un_sdr13__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr13__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr13__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr13__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr13__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr13__bindgen_ty_1))
    );
}
impl un_sdr13__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr13() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr13>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr13))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr13>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr13))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr13>())).sdr13 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr13),
            "::",
            stringify!(sdr13)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr13>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr13),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rxd3 {
    pub rxd3: cty::c_uchar,
    pub BIT: un_rxd3__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rxd3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rxd3__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd3__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd3__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd3__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd3__bindgen_ty_1))
    );
}
impl un_rxd3__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rxd3() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd3>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd3))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd3>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd3>())).rxd3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd3),
            "::",
            stringify!(rxd3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd3>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd3),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio31 {
    pub sio31: cty::c_uchar,
    pub BIT: un_sio31__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio31__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio31__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio31__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio31__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio31__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio31__bindgen_ty_1))
    );
}
impl un_sio31__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio31() {
    assert_eq!(
        ::core::mem::size_of::<un_sio31>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio31))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio31>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio31))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio31>())).sio31 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio31),
            "::",
            stringify!(sio31)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio31>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio31),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr00 {
    pub tdr00: cty::c_ushort,
    pub BIT: un_tdr00__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr00__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr00__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr00__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr00__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr00__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr00__bindgen_ty_1))
    );
}
impl un_tdr00__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr00() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr00>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr00))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr00>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr00))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr00>())).tdr00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr00),
            "::",
            stringify!(tdr00)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr00>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr00),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr01 {
    pub tdr01: cty::c_ushort,
    pub BIT: un_tdr01__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr01__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr01__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr01__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr01__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr01__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr01__bindgen_ty_1))
    );
}
impl un_tdr01__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr01() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr01>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr01))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr01>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr01))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr01>())).tdr01 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr01),
            "::",
            stringify!(tdr01)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr01>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr01),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr01l {
    pub tdr01l: cty::c_uchar,
    pub BIT: un_tdr01l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr01l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr01l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr01l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr01l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr01l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr01l__bindgen_ty_1))
    );
}
impl un_tdr01l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr01l() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr01l>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr01l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr01l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr01l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr01l>())).tdr01l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr01l),
            "::",
            stringify!(tdr01l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr01l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr01l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr01h {
    pub tdr01h: cty::c_uchar,
    pub BIT: un_tdr01h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr01h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr01h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr01h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr01h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr01h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr01h__bindgen_ty_1))
    );
}
impl un_tdr01h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr01h() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr01h>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr01h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr01h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr01h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr01h>())).tdr01h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr01h),
            "::",
            stringify!(tdr01h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr01h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr01h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_adcr {
    pub adcr: cty::c_ushort,
    pub BIT: un_adcr__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_adcr__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_adcr__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_adcr__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_adcr__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adcr__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_adcr__bindgen_ty_1))
    );
}
impl un_adcr__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_adcr() {
    assert_eq!(
        ::core::mem::size_of::<un_adcr>(),
        2usize,
        concat!("Size of: ", stringify!(un_adcr))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adcr>(),
        2usize,
        concat!("Alignment of ", stringify!(un_adcr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adcr>())).adcr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adcr),
            "::",
            stringify!(adcr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adcr>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adcr),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_adcrh {
    pub adcrh: cty::c_uchar,
    pub BIT: un_adcrh__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_adcrh__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_adcrh__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_adcrh__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_adcrh__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adcrh__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_adcrh__bindgen_ty_1))
    );
}
impl un_adcrh__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_adcrh() {
    assert_eq!(
        ::core::mem::size_of::<un_adcrh>(),
        1usize,
        concat!("Size of: ", stringify!(un_adcrh))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adcrh>(),
        1usize,
        concat!("Alignment of ", stringify!(un_adcrh))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adcrh>())).adcrh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adcrh),
            "::",
            stringify!(adcrh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adcrh>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adcrh),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm0 {
    pub pm0: cty::c_uchar,
    pub BIT: un_pm0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm0__bindgen_ty_1))
    );
}
impl un_pm0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm0() {
    assert_eq!(
        ::core::mem::size_of::<un_pm0>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm0>())).pm0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm0),
            "::",
            stringify!(pm0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm1 {
    pub pm1: cty::c_uchar,
    pub BIT: un_pm1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm1__bindgen_ty_1))
    );
}
impl un_pm1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm1>())).pm1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm1),
            "::",
            stringify!(pm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm2 {
    pub pm2: cty::c_uchar,
    pub BIT: un_pm2__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm2__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm2__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm2__bindgen_ty_1))
    );
}
impl un_pm2__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm2() {
    assert_eq!(
        ::core::mem::size_of::<un_pm2>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm2))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm2>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm2>())).pm2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm2),
            "::",
            stringify!(pm2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm2>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm2),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm3 {
    pub pm3: cty::c_uchar,
    pub BIT: un_pm3__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm3__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm3__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm3__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm3__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm3__bindgen_ty_1))
    );
}
impl un_pm3__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm3() {
    assert_eq!(
        ::core::mem::size_of::<un_pm3>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm3))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm3>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm3>())).pm3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm3),
            "::",
            stringify!(pm3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm3>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm3),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm4 {
    pub pm4: cty::c_uchar,
    pub BIT: un_pm4__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm4__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm4__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm4__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm4__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm4__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm4__bindgen_ty_1))
    );
}
impl un_pm4__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm4() {
    assert_eq!(
        ::core::mem::size_of::<un_pm4>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm4))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm4>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm4))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm4>())).pm4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm4),
            "::",
            stringify!(pm4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm4>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm4),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm5 {
    pub pm5: cty::c_uchar,
    pub BIT: un_pm5__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm5__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm5__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm5__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm5__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm5__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm5__bindgen_ty_1))
    );
}
impl un_pm5__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm5() {
    assert_eq!(
        ::core::mem::size_of::<un_pm5>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm5))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm5>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm5))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm5>())).pm5 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm5),
            "::",
            stringify!(pm5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm5>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm5),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm6 {
    pub pm6: cty::c_uchar,
    pub BIT: un_pm6__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm6__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm6__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm6__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm6__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm6__bindgen_ty_1))
    );
}
impl un_pm6__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm6() {
    assert_eq!(
        ::core::mem::size_of::<un_pm6>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm6))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm6>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm6))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm6>())).pm6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm6),
            "::",
            stringify!(pm6)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm6>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm6),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm7 {
    pub pm7: cty::c_uchar,
    pub BIT: un_pm7__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm7__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm7__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm7__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm7__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm7__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm7__bindgen_ty_1))
    );
}
impl un_pm7__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm7() {
    assert_eq!(
        ::core::mem::size_of::<un_pm7>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm7))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm7>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm7))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm7>())).pm7 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm7),
            "::",
            stringify!(pm7)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm7>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm7),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm8 {
    pub pm8: cty::c_uchar,
    pub BIT: un_pm8__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm8__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm8__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm8__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm8__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm8__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm8__bindgen_ty_1))
    );
}
impl un_pm8__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm8() {
    assert_eq!(
        ::core::mem::size_of::<un_pm8>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm8))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm8>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm8))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm8>())).pm8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm8),
            "::",
            stringify!(pm8)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm8>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm8),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm9 {
    pub pm9: cty::c_uchar,
    pub BIT: un_pm9__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm9__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm9__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm9__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm9__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm9__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm9__bindgen_ty_1))
    );
}
impl un_pm9__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm9() {
    assert_eq!(
        ::core::mem::size_of::<un_pm9>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm9))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm9>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm9))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm9>())).pm9 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm9),
            "::",
            stringify!(pm9)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm9>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm9),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm10 {
    pub pm10: cty::c_uchar,
    pub BIT: un_pm10__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm10__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm10__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm10__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm10__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm10__bindgen_ty_1))
    );
}
impl un_pm10__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm10() {
    assert_eq!(
        ::core::mem::size_of::<un_pm10>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm10))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm10>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm10))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm10>())).pm10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm10),
            "::",
            stringify!(pm10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm10>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm10),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm11 {
    pub pm11: cty::c_uchar,
    pub BIT: un_pm11__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm11__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm11__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm11__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm11__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm11__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm11__bindgen_ty_1))
    );
}
impl un_pm11__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm11() {
    assert_eq!(
        ::core::mem::size_of::<un_pm11>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm11))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm11>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm11))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm11>())).pm11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm11),
            "::",
            stringify!(pm11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm11>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm11),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm12 {
    pub pm12: cty::c_uchar,
    pub BIT: un_pm12__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm12__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm12__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm12__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm12__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm12__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm12__bindgen_ty_1))
    );
}
impl un_pm12__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm12() {
    assert_eq!(
        ::core::mem::size_of::<un_pm12>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm12))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm12>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm12))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm12>())).pm12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm12),
            "::",
            stringify!(pm12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm12>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm12),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm14 {
    pub pm14: cty::c_uchar,
    pub BIT: un_pm14__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm14__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm14__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm14__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm14__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm14__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm14__bindgen_ty_1))
    );
}
impl un_pm14__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm14() {
    assert_eq!(
        ::core::mem::size_of::<un_pm14>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm14))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm14>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm14))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm14>())).pm14 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm14),
            "::",
            stringify!(pm14)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm14>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm14),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pm15 {
    pub pm15: cty::c_uchar,
    pub BIT: un_pm15__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pm15__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pm15__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pm15__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm15__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm15__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm15__bindgen_ty_1))
    );
}
impl un_pm15__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pm15() {
    assert_eq!(
        ::core::mem::size_of::<un_pm15>(),
        1usize,
        concat!("Size of: ", stringify!(un_pm15))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pm15>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pm15))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm15>())).pm15 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm15),
            "::",
            stringify!(pm15)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pm15>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pm15),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_adm0 {
    pub adm0: cty::c_uchar,
    pub BIT: un_adm0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_adm0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_adm0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_adm0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_adm0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adm0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_adm0__bindgen_ty_1))
    );
}
impl un_adm0__bindgen_ty_1 {
    #[inline]
    pub fn adce(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_adce(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn adcs(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_adcs(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        adce: cty::c_uchar,
        adcs: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let adce: u8 = unsafe { ::core::mem::transmute(adce) };
            adce as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let adcs: u8 = unsafe { ::core::mem::transmute(adcs) };
            adcs as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_adm0() {
    assert_eq!(
        ::core::mem::size_of::<un_adm0>(),
        1usize,
        concat!("Size of: ", stringify!(un_adm0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adm0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_adm0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adm0>())).adm0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adm0),
            "::",
            stringify!(adm0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adm0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adm0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_ads {
    pub ads: cty::c_uchar,
    pub BIT: un_ads__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_ads__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_ads__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_ads__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_ads__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_ads__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_ads__bindgen_ty_1))
    );
}
impl un_ads__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_ads() {
    assert_eq!(
        ::core::mem::size_of::<un_ads>(),
        1usize,
        concat!("Size of: ", stringify!(un_ads))
    );
    assert_eq!(
        ::core::mem::align_of::<un_ads>(),
        1usize,
        concat!("Alignment of ", stringify!(un_ads))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_ads>())).ads as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_ads),
            "::",
            stringify!(ads)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_ads>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_ads),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_adm1 {
    pub adm1: cty::c_uchar,
    pub BIT: un_adm1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_adm1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_adm1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_adm1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_adm1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adm1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_adm1__bindgen_ty_1))
    );
}
impl un_adm1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_adm1() {
    assert_eq!(
        ::core::mem::size_of::<un_adm1>(),
        1usize,
        concat!("Size of: ", stringify!(un_adm1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_adm1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_adm1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adm1>())).adm1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adm1),
            "::",
            stringify!(adm1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_adm1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_adm1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_krm {
    pub krm: cty::c_uchar,
    pub BIT: un_krm__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_krm__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_krm__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_krm__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_krm__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_krm__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_krm__bindgen_ty_1))
    );
}
impl un_krm__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_krm() {
    assert_eq!(
        ::core::mem::size_of::<un_krm>(),
        1usize,
        concat!("Size of: ", stringify!(un_krm))
    );
    assert_eq!(
        ::core::mem::align_of::<un_krm>(),
        1usize,
        concat!("Alignment of ", stringify!(un_krm))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_krm>())).krm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_krm),
            "::",
            stringify!(krm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_krm>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_krm),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_egp0 {
    pub egp0: cty::c_uchar,
    pub BIT: un_egp0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_egp0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_egp0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_egp0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_egp0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egp0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egp0__bindgen_ty_1))
    );
}
impl un_egp0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_egp0() {
    assert_eq!(
        ::core::mem::size_of::<un_egp0>(),
        1usize,
        concat!("Size of: ", stringify!(un_egp0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egp0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egp0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egp0>())).egp0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egp0),
            "::",
            stringify!(egp0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egp0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egp0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_egn0 {
    pub egn0: cty::c_uchar,
    pub BIT: un_egn0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_egn0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_egn0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_egn0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_egn0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egn0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egn0__bindgen_ty_1))
    );
}
impl un_egn0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_egn0() {
    assert_eq!(
        ::core::mem::size_of::<un_egn0>(),
        1usize,
        concat!("Size of: ", stringify!(un_egn0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egn0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egn0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egn0>())).egn0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egn0),
            "::",
            stringify!(egn0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egn0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egn0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_egp1 {
    pub egp1: cty::c_uchar,
    pub BIT: un_egp1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_egp1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_egp1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_egp1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_egp1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egp1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egp1__bindgen_ty_1))
    );
}
impl un_egp1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_egp1() {
    assert_eq!(
        ::core::mem::size_of::<un_egp1>(),
        1usize,
        concat!("Size of: ", stringify!(un_egp1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egp1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egp1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egp1>())).egp1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egp1),
            "::",
            stringify!(egp1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egp1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egp1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_egn1 {
    pub egn1: cty::c_uchar,
    pub BIT: un_egn1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_egn1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_egn1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_egn1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_egn1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egn1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egn1__bindgen_ty_1))
    );
}
impl un_egn1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_egn1() {
    assert_eq!(
        ::core::mem::size_of::<un_egn1>(),
        1usize,
        concat!("Size of: ", stringify!(un_egn1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_egn1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_egn1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egn1>())).egn1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egn1),
            "::",
            stringify!(egn1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_egn1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_egn1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr02 {
    pub sdr02: cty::c_ushort,
    pub BIT: un_sdr02__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr02__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr02__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr02__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr02__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr02__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr02__bindgen_ty_1))
    );
}
impl un_sdr02__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr02() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr02>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr02))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr02>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr02))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr02>())).sdr02 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr02),
            "::",
            stringify!(sdr02)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr02>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr02),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio10 {
    pub sio10: cty::c_uchar,
    pub BIT: un_sio10__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio10__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio10__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio10__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio10__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio10__bindgen_ty_1))
    );
}
impl un_sio10__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio10() {
    assert_eq!(
        ::core::mem::size_of::<un_sio10>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio10))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio10>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio10))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio10>())).sio10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio10),
            "::",
            stringify!(sio10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio10>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio10),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_txd1 {
    pub txd1: cty::c_uchar,
    pub BIT: un_txd1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_txd1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_txd1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_txd1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd1__bindgen_ty_1))
    );
}
impl un_txd1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_txd1() {
    assert_eq!(
        ::core::mem::size_of::<un_txd1>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd1>())).txd1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd1),
            "::",
            stringify!(txd1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr03 {
    pub sdr03: cty::c_ushort,
    pub BIT: un_sdr03__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr03__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr03__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr03__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr03__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr03__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr03__bindgen_ty_1))
    );
}
impl un_sdr03__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr03() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr03>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr03))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr03>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr03))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr03>())).sdr03 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr03),
            "::",
            stringify!(sdr03)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr03>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr03),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rxd1 {
    pub rxd1: cty::c_uchar,
    pub BIT: un_rxd1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rxd1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rxd1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd1__bindgen_ty_1))
    );
}
impl un_rxd1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rxd1() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd1>())).rxd1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd1),
            "::",
            stringify!(rxd1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio11 {
    pub sio11: cty::c_uchar,
    pub BIT: un_sio11__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio11__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio11__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio11__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio11__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio11__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio11__bindgen_ty_1))
    );
}
impl un_sio11__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio11() {
    assert_eq!(
        ::core::mem::size_of::<un_sio11>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio11))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio11>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio11))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio11>())).sio11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio11),
            "::",
            stringify!(sio11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio11>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio11),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr10 {
    pub sdr10: cty::c_ushort,
    pub BIT: un_sdr10__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr10__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr10__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr10__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr10__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr10__bindgen_ty_1))
    );
}
impl un_sdr10__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr10() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr10>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr10))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr10>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr10))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr10>())).sdr10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr10),
            "::",
            stringify!(sdr10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr10>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr10),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio20 {
    pub sio20: cty::c_uchar,
    pub BIT: un_sio20__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio20__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio20__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio20__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio20__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio20__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio20__bindgen_ty_1))
    );
}
impl un_sio20__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio20() {
    assert_eq!(
        ::core::mem::size_of::<un_sio20>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio20))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio20>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio20))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio20>())).sio20 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio20),
            "::",
            stringify!(sio20)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio20>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio20),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_txd2 {
    pub txd2: cty::c_uchar,
    pub BIT: un_txd2__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_txd2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_txd2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_txd2__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd2__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd2__bindgen_ty_1))
    );
}
impl un_txd2__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_txd2() {
    assert_eq!(
        ::core::mem::size_of::<un_txd2>(),
        1usize,
        concat!("Size of: ", stringify!(un_txd2))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txd2>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txd2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd2>())).txd2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd2),
            "::",
            stringify!(txd2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txd2>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txd2),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sdr11 {
    pub sdr11: cty::c_ushort,
    pub BIT: un_sdr11__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_sdr11__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_sdr11__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr11__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr11__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr11__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr11__bindgen_ty_1))
    );
}
impl un_sdr11__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sdr11() {
    assert_eq!(
        ::core::mem::size_of::<un_sdr11>(),
        2usize,
        concat!("Size of: ", stringify!(un_sdr11))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sdr11>(),
        2usize,
        concat!("Alignment of ", stringify!(un_sdr11))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr11>())).sdr11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr11),
            "::",
            stringify!(sdr11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sdr11>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sdr11),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rxd2 {
    pub rxd2: cty::c_uchar,
    pub BIT: un_rxd2__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rxd2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rxd2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd2__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd2__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd2__bindgen_ty_1))
    );
}
impl un_rxd2__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rxd2() {
    assert_eq!(
        ::core::mem::size_of::<un_rxd2>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxd2))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxd2>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxd2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd2>())).rxd2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd2),
            "::",
            stringify!(rxd2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxd2>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxd2),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sio21 {
    pub sio21: cty::c_uchar,
    pub BIT: un_sio21__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sio21__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sio21__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sio21__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio21__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio21__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio21__bindgen_ty_1))
    );
}
impl un_sio21__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sio21() {
    assert_eq!(
        ::core::mem::size_of::<un_sio21>(),
        1usize,
        concat!("Size of: ", stringify!(un_sio21))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sio21>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sio21))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio21>())).sio21 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio21),
            "::",
            stringify!(sio21)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sio21>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sio21),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_iica0 {
    pub iica0: cty::c_uchar,
    pub BIT: un_iica0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_iica0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_iica0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_iica0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iica0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iica0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iica0__bindgen_ty_1))
    );
}
impl un_iica0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_iica0() {
    assert_eq!(
        ::core::mem::size_of::<un_iica0>(),
        1usize,
        concat!("Size of: ", stringify!(un_iica0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iica0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iica0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iica0>())).iica0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iica0),
            "::",
            stringify!(iica0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iica0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iica0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_iics0 {
    pub iics0: cty::c_uchar,
    pub BIT: un_iics0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_iics0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_iics0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_iics0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iics0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iics0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iics0__bindgen_ty_1))
    );
}
impl un_iics0__bindgen_ty_1 {
    #[inline]
    pub fn spd0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_spd0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn std0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_std0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ackd0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ackd0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trc0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_trc0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn coi0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_coi0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exc0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_exc0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ald0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ald0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msts0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_msts0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        spd0: cty::c_uchar,
        std0: cty::c_uchar,
        ackd0: cty::c_uchar,
        trc0: cty::c_uchar,
        coi0: cty::c_uchar,
        exc0: cty::c_uchar,
        ald0: cty::c_uchar,
        msts0: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let spd0: u8 = unsafe { ::core::mem::transmute(spd0) };
            spd0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let std0: u8 = unsafe { ::core::mem::transmute(std0) };
            std0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ackd0: u8 = unsafe { ::core::mem::transmute(ackd0) };
            ackd0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let trc0: u8 = unsafe { ::core::mem::transmute(trc0) };
            trc0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let coi0: u8 = unsafe { ::core::mem::transmute(coi0) };
            coi0 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let exc0: u8 = unsafe { ::core::mem::transmute(exc0) };
            exc0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ald0: u8 = unsafe { ::core::mem::transmute(ald0) };
            ald0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let msts0: u8 = unsafe { ::core::mem::transmute(msts0) };
            msts0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_iics0() {
    assert_eq!(
        ::core::mem::size_of::<un_iics0>(),
        1usize,
        concat!("Size of: ", stringify!(un_iics0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iics0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iics0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iics0>())).iics0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iics0),
            "::",
            stringify!(iics0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iics0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iics0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_iicf0 {
    pub iicf0: cty::c_uchar,
    pub BIT: un_iicf0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_iicf0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_iicf0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_iicf0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iicf0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iicf0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iicf0__bindgen_ty_1))
    );
}
impl un_iicf0__bindgen_ty_1 {
    #[inline]
    pub fn iicrsv0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicrsv0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stcen0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stcen0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicbsy0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicbsy0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stcf0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stcf0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iicrsv0: cty::c_uchar,
        stcen0: cty::c_uchar,
        iicbsy0: cty::c_uchar,
        stcf0: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iicrsv0: u8 = unsafe { ::core::mem::transmute(iicrsv0) };
            iicrsv0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let stcen0: u8 = unsafe { ::core::mem::transmute(stcen0) };
            stcen0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let iicbsy0: u8 = unsafe { ::core::mem::transmute(iicbsy0) };
            iicbsy0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let stcf0: u8 = unsafe { ::core::mem::transmute(stcf0) };
            stcf0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_iicf0() {
    assert_eq!(
        ::core::mem::size_of::<un_iicf0>(),
        1usize,
        concat!("Size of: ", stringify!(un_iicf0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iicf0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iicf0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iicf0>())).iicf0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iicf0),
            "::",
            stringify!(iicf0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iicf0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iicf0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_iica1 {
    pub iica1: cty::c_uchar,
    pub BIT: un_iica1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_iica1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_iica1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_iica1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iica1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iica1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iica1__bindgen_ty_1))
    );
}
impl un_iica1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_iica1() {
    assert_eq!(
        ::core::mem::size_of::<un_iica1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iica1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iica1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iica1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iica1>())).iica1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iica1),
            "::",
            stringify!(iica1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iica1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iica1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_iics1 {
    pub iics1: cty::c_uchar,
    pub BIT: un_iics1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_iics1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_iics1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_iics1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iics1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iics1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iics1__bindgen_ty_1))
    );
}
impl un_iics1__bindgen_ty_1 {
    #[inline]
    pub fn spd1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_spd1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn std1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_std1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ackd1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ackd1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trc1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_trc1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn coi1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_coi1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exc1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_exc1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ald1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ald1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msts1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_msts1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        spd1: cty::c_uchar,
        std1: cty::c_uchar,
        ackd1: cty::c_uchar,
        trc1: cty::c_uchar,
        coi1: cty::c_uchar,
        exc1: cty::c_uchar,
        ald1: cty::c_uchar,
        msts1: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let spd1: u8 = unsafe { ::core::mem::transmute(spd1) };
            spd1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let std1: u8 = unsafe { ::core::mem::transmute(std1) };
            std1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ackd1: u8 = unsafe { ::core::mem::transmute(ackd1) };
            ackd1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let trc1: u8 = unsafe { ::core::mem::transmute(trc1) };
            trc1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let coi1: u8 = unsafe { ::core::mem::transmute(coi1) };
            coi1 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let exc1: u8 = unsafe { ::core::mem::transmute(exc1) };
            exc1 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ald1: u8 = unsafe { ::core::mem::transmute(ald1) };
            ald1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let msts1: u8 = unsafe { ::core::mem::transmute(msts1) };
            msts1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_iics1() {
    assert_eq!(
        ::core::mem::size_of::<un_iics1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iics1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iics1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iics1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iics1>())).iics1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iics1),
            "::",
            stringify!(iics1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iics1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iics1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_iicf1 {
    pub iicf1: cty::c_uchar,
    pub BIT: un_iicf1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_iicf1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_iicf1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_iicf1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iicf1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iicf1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iicf1__bindgen_ty_1))
    );
}
impl un_iicf1__bindgen_ty_1 {
    #[inline]
    pub fn iicrsv1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicrsv1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stcen1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stcen1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicbsy1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicbsy1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stcf1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stcf1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iicrsv1: cty::c_uchar,
        stcen1: cty::c_uchar,
        iicbsy1: cty::c_uchar,
        stcf1: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iicrsv1: u8 = unsafe { ::core::mem::transmute(iicrsv1) };
            iicrsv1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let stcen1: u8 = unsafe { ::core::mem::transmute(stcen1) };
            stcen1 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let iicbsy1: u8 = unsafe { ::core::mem::transmute(iicbsy1) };
            iicbsy1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let stcf1: u8 = unsafe { ::core::mem::transmute(stcf1) };
            stcf1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_iicf1() {
    assert_eq!(
        ::core::mem::size_of::<un_iicf1>(),
        1usize,
        concat!("Size of: ", stringify!(un_iicf1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_iicf1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_iicf1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iicf1>())).iicf1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iicf1),
            "::",
            stringify!(iicf1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_iicf1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_iicf1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr02 {
    pub tdr02: cty::c_ushort,
    pub BIT: un_tdr02__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr02__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr02__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr02__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr02__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr02__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr02__bindgen_ty_1))
    );
}
impl un_tdr02__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr02() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr02>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr02))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr02>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr02))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr02>())).tdr02 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr02),
            "::",
            stringify!(tdr02)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr02>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr02),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr03 {
    pub tdr03: cty::c_ushort,
    pub BIT: un_tdr03__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr03__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr03__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr03__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr03__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr03__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr03__bindgen_ty_1))
    );
}
impl un_tdr03__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr03() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr03>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr03))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr03>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr03))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr03>())).tdr03 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr03),
            "::",
            stringify!(tdr03)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr03>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr03),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr03l {
    pub tdr03l: cty::c_uchar,
    pub BIT: un_tdr03l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr03l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr03l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr03l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr03l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr03l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr03l__bindgen_ty_1))
    );
}
impl un_tdr03l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr03l() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr03l>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr03l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr03l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr03l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr03l>())).tdr03l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr03l),
            "::",
            stringify!(tdr03l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr03l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr03l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr03h {
    pub tdr03h: cty::c_uchar,
    pub BIT: un_tdr03h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr03h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr03h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr03h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr03h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr03h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr03h__bindgen_ty_1))
    );
}
impl un_tdr03h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr03h() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr03h>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr03h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr03h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr03h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr03h>())).tdr03h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr03h),
            "::",
            stringify!(tdr03h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr03h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr03h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr04 {
    pub tdr04: cty::c_ushort,
    pub BIT: un_tdr04__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr04__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr04__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr04__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr04__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr04__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr04__bindgen_ty_1))
    );
}
impl un_tdr04__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr04() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr04>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr04))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr04>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr04))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr04>())).tdr04 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr04),
            "::",
            stringify!(tdr04)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr04>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr04),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr05 {
    pub tdr05: cty::c_ushort,
    pub BIT: un_tdr05__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr05__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr05__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr05__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr05__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr05__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr05__bindgen_ty_1))
    );
}
impl un_tdr05__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr05() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr05>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr05))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr05>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr05))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr05>())).tdr05 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr05),
            "::",
            stringify!(tdr05)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr05>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr05),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr06 {
    pub tdr06: cty::c_ushort,
    pub BIT: un_tdr06__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr06__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr06__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr06__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr06__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr06__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr06__bindgen_ty_1))
    );
}
impl un_tdr06__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr06() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr06>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr06))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr06>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr06))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr06>())).tdr06 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr06),
            "::",
            stringify!(tdr06)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr06>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr06),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr07 {
    pub tdr07: cty::c_ushort,
    pub BIT: un_tdr07__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr07__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr07__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr07__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr07__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr07__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr07__bindgen_ty_1))
    );
}
impl un_tdr07__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr07() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr07>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr07))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr07>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr07))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr07>())).tdr07 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr07),
            "::",
            stringify!(tdr07)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr07>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr07),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr10 {
    pub tdr10: cty::c_ushort,
    pub BIT: un_tdr10__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr10__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr10__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr10__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr10__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr10__bindgen_ty_1))
    );
}
impl un_tdr10__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr10() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr10>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr10))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr10>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr10))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr10>())).tdr10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr10),
            "::",
            stringify!(tdr10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr10>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr10),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr11 {
    pub tdr11: cty::c_ushort,
    pub BIT: un_tdr11__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr11__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr11__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr11__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr11__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr11__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr11__bindgen_ty_1))
    );
}
impl un_tdr11__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr11() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr11>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr11))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr11>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr11))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr11>())).tdr11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr11),
            "::",
            stringify!(tdr11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr11>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr11),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr11l {
    pub tdr11l: cty::c_uchar,
    pub BIT: un_tdr11l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr11l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr11l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr11l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr11l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr11l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr11l__bindgen_ty_1))
    );
}
impl un_tdr11l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr11l() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr11l>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr11l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr11l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr11l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr11l>())).tdr11l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr11l),
            "::",
            stringify!(tdr11l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr11l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr11l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr11h {
    pub tdr11h: cty::c_uchar,
    pub BIT: un_tdr11h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr11h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr11h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr11h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr11h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr11h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr11h__bindgen_ty_1))
    );
}
impl un_tdr11h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr11h() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr11h>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr11h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr11h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr11h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr11h>())).tdr11h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr11h),
            "::",
            stringify!(tdr11h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr11h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr11h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr12 {
    pub tdr12: cty::c_ushort,
    pub BIT: un_tdr12__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr12__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr12__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr12__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr12__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr12__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr12__bindgen_ty_1))
    );
}
impl un_tdr12__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr12() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr12>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr12))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr12>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr12))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr12>())).tdr12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr12),
            "::",
            stringify!(tdr12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr12>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr12),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr13 {
    pub tdr13: cty::c_ushort,
    pub BIT: un_tdr13__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr13__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr13__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr13__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr13__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr13__bindgen_ty_1))
    );
}
impl un_tdr13__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr13() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr13>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr13))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr13>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr13))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr13>())).tdr13 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr13),
            "::",
            stringify!(tdr13)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr13>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr13),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr13l {
    pub tdr13l: cty::c_uchar,
    pub BIT: un_tdr13l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr13l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr13l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr13l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr13l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr13l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr13l__bindgen_ty_1))
    );
}
impl un_tdr13l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr13l() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr13l>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr13l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr13l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr13l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr13l>())).tdr13l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr13l),
            "::",
            stringify!(tdr13l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr13l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr13l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr13h {
    pub tdr13h: cty::c_uchar,
    pub BIT: un_tdr13h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr13h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr13h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr13h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr13h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr13h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr13h__bindgen_ty_1))
    );
}
impl un_tdr13h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr13h() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr13h>(),
        1usize,
        concat!("Size of: ", stringify!(un_tdr13h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr13h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_tdr13h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr13h>())).tdr13h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr13h),
            "::",
            stringify!(tdr13h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr13h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr13h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr14 {
    pub tdr14: cty::c_ushort,
    pub BIT: un_tdr14__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr14__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr14__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr14__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr14__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr14__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr14__bindgen_ty_1))
    );
}
impl un_tdr14__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr14() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr14>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr14))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr14>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr14))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr14>())).tdr14 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr14),
            "::",
            stringify!(tdr14)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr14>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr14),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr15 {
    pub tdr15: cty::c_ushort,
    pub BIT: un_tdr15__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr15__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr15__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr15__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr15__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr15__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr15__bindgen_ty_1))
    );
}
impl un_tdr15__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr15() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr15>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr15))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr15>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr15))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr15>())).tdr15 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr15),
            "::",
            stringify!(tdr15)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr15>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr15),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr16 {
    pub tdr16: cty::c_ushort,
    pub BIT: un_tdr16__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr16__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr16__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr16__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr16__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr16__bindgen_ty_1))
    );
}
impl un_tdr16__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr16() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr16>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr16))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr16>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr16))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr16>())).tdr16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr16),
            "::",
            stringify!(tdr16)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr16>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr16),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_tdr17 {
    pub tdr17: cty::c_ushort,
    pub BIT: un_tdr17__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_tdr17__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_tdr17__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr17__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr17__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr17__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr17__bindgen_ty_1))
    );
}
impl un_tdr17__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_tdr17() {
    assert_eq!(
        ::core::mem::size_of::<un_tdr17>(),
        2usize,
        concat!("Size of: ", stringify!(un_tdr17))
    );
    assert_eq!(
        ::core::mem::align_of::<un_tdr17>(),
        2usize,
        concat!("Alignment of ", stringify!(un_tdr17))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr17>())).tdr17 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr17),
            "::",
            stringify!(tdr17)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_tdr17>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_tdr17),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flpmc {
    pub flpmc: cty::c_uchar,
    pub BIT: un_flpmc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_flpmc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_flpmc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flpmc__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_flpmc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flpmc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flpmc__bindgen_ty_1))
    );
}
impl un_flpmc__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flpmc() {
    assert_eq!(
        ::core::mem::size_of::<un_flpmc>(),
        1usize,
        concat!("Size of: ", stringify!(un_flpmc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flpmc>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flpmc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flpmc>())).flpmc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flpmc),
            "::",
            stringify!(flpmc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flpmc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flpmc),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flars {
    pub flars: cty::c_uchar,
    pub BIT: un_flars__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_flars__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_flars__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flars__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_flars__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flars__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flars__bindgen_ty_1))
    );
}
impl un_flars__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flars() {
    assert_eq!(
        ::core::mem::size_of::<un_flars>(),
        1usize,
        concat!("Size of: ", stringify!(un_flars))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flars>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flars))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flars>())).flars as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flars),
            "::",
            stringify!(flars)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flars>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flars),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flapl {
    pub flapl: cty::c_ushort,
    pub BIT: un_flapl__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_flapl__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_flapl__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flapl__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_flapl__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flapl__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flapl__bindgen_ty_1))
    );
}
impl un_flapl__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flapl() {
    assert_eq!(
        ::core::mem::size_of::<un_flapl>(),
        2usize,
        concat!("Size of: ", stringify!(un_flapl))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flapl>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flapl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flapl>())).flapl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flapl),
            "::",
            stringify!(flapl)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flapl>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flapl),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flaph {
    pub flaph: cty::c_uchar,
    pub BIT: un_flaph__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_flaph__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_flaph__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flaph__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_flaph__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flaph__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flaph__bindgen_ty_1))
    );
}
impl un_flaph__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flaph() {
    assert_eq!(
        ::core::mem::size_of::<un_flaph>(),
        1usize,
        concat!("Size of: ", stringify!(un_flaph))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flaph>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flaph))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flaph>())).flaph as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flaph),
            "::",
            stringify!(flaph)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flaph>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flaph),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_fssq {
    pub fssq: cty::c_uchar,
    pub BIT: un_fssq__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_fssq__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_fssq__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_fssq__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_fssq__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_fssq__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_fssq__bindgen_ty_1))
    );
}
impl un_fssq__bindgen_ty_1 {
    #[inline]
    pub fn fsstp(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fsstp(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sqst(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sqst(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fsstp: cty::c_uchar,
        sqst: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fsstp: u8 = unsafe { ::core::mem::transmute(fsstp) };
            fsstp as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sqst: u8 = unsafe { ::core::mem::transmute(sqst) };
            sqst as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_fssq() {
    assert_eq!(
        ::core::mem::size_of::<un_fssq>(),
        1usize,
        concat!("Size of: ", stringify!(un_fssq))
    );
    assert_eq!(
        ::core::mem::align_of::<un_fssq>(),
        1usize,
        concat!("Alignment of ", stringify!(un_fssq))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_fssq>())).fssq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_fssq),
            "::",
            stringify!(fssq)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_fssq>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_fssq),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flsedl {
    pub flsedl: cty::c_ushort,
    pub BIT: un_flsedl__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_flsedl__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_flsedl__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flsedl__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_flsedl__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flsedl__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flsedl__bindgen_ty_1))
    );
}
impl un_flsedl__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flsedl() {
    assert_eq!(
        ::core::mem::size_of::<un_flsedl>(),
        2usize,
        concat!("Size of: ", stringify!(un_flsedl))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flsedl>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flsedl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flsedl>())).flsedl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flsedl),
            "::",
            stringify!(flsedl)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flsedl>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flsedl),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flsedh {
    pub flsedh: cty::c_uchar,
    pub BIT: un_flsedh__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_flsedh__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_flsedh__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flsedh__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_flsedh__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flsedh__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flsedh__bindgen_ty_1))
    );
}
impl un_flsedh__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flsedh() {
    assert_eq!(
        ::core::mem::size_of::<un_flsedh>(),
        1usize,
        concat!("Size of: ", stringify!(un_flsedh))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flsedh>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flsedh))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flsedh>())).flsedh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flsedh),
            "::",
            stringify!(flsedh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flsedh>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flsedh),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flrst {
    pub flrst: cty::c_uchar,
    pub BIT: un_flrst__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_flrst__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_flrst__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flrst__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_flrst__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flrst__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flrst__bindgen_ty_1))
    );
}
impl un_flrst__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flrst() {
    assert_eq!(
        ::core::mem::size_of::<un_flrst>(),
        1usize,
        concat!("Size of: ", stringify!(un_flrst))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flrst>(),
        1usize,
        concat!("Alignment of ", stringify!(un_flrst))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flrst>())).flrst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flrst),
            "::",
            stringify!(flrst)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flrst>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flrst),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_fsastl {
    pub fsastl: cty::c_uchar,
    pub BIT: un_fsastl__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_fsastl__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_fsastl__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_fsastl__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_fsastl__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_fsastl__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_fsastl__bindgen_ty_1))
    );
}
impl un_fsastl__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_fsastl() {
    assert_eq!(
        ::core::mem::size_of::<un_fsastl>(),
        1usize,
        concat!("Size of: ", stringify!(un_fsastl))
    );
    assert_eq!(
        ::core::mem::align_of::<un_fsastl>(),
        1usize,
        concat!("Alignment of ", stringify!(un_fsastl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_fsastl>())).fsastl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_fsastl),
            "::",
            stringify!(fsastl)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_fsastl>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_fsastl),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_fsasth {
    pub fsasth: cty::c_uchar,
    pub BIT: un_fsasth__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_fsasth__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_fsasth__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_fsasth__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_fsasth__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_fsasth__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_fsasth__bindgen_ty_1))
    );
}
impl un_fsasth__bindgen_ty_1 {
    #[inline]
    pub fn sqend(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sqend(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn esqend(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_esqend(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sqend: cty::c_uchar,
        esqend: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sqend: u8 = unsafe { ::core::mem::transmute(sqend) };
            sqend as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let esqend: u8 = unsafe { ::core::mem::transmute(esqend) };
            esqend as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_fsasth() {
    assert_eq!(
        ::core::mem::size_of::<un_fsasth>(),
        1usize,
        concat!("Size of: ", stringify!(un_fsasth))
    );
    assert_eq!(
        ::core::mem::align_of::<un_fsasth>(),
        1usize,
        concat!("Alignment of ", stringify!(un_fsasth))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_fsasth>())).fsasth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_fsasth),
            "::",
            stringify!(fsasth)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_fsasth>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_fsasth),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flwl {
    pub flwl: cty::c_ushort,
    pub BIT: un_flwl__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_flwl__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_flwl__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flwl__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_flwl__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flwl__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flwl__bindgen_ty_1))
    );
}
impl un_flwl__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flwl() {
    assert_eq!(
        ::core::mem::size_of::<un_flwl>(),
        2usize,
        concat!("Size of: ", stringify!(un_flwl))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flwl>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flwl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flwl>())).flwl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flwl),
            "::",
            stringify!(flwl)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flwl>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flwl),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_flwh {
    pub flwh: cty::c_ushort,
    pub BIT: un_flwh__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_flwh__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_flwh__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_flwh__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_flwh__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flwh__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flwh__bindgen_ty_1))
    );
}
impl un_flwh__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_flwh() {
    assert_eq!(
        ::core::mem::size_of::<un_flwh>(),
        2usize,
        concat!("Size of: ", stringify!(un_flwh))
    );
    assert_eq!(
        ::core::mem::align_of::<un_flwh>(),
        2usize,
        concat!("Alignment of ", stringify!(un_flwh))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flwh>())).flwh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flwh),
            "::",
            stringify!(flwh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_flwh>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_flwh),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_itmc {
    pub itmc: cty::c_ushort,
    pub BIT: un_itmc__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_itmc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_itmc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_itmc__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_itmc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_itmc__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_itmc__bindgen_ty_1))
    );
}
impl un_itmc__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_itmc() {
    assert_eq!(
        ::core::mem::size_of::<un_itmc>(),
        2usize,
        concat!("Size of: ", stringify!(un_itmc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_itmc>(),
        2usize,
        concat!("Alignment of ", stringify!(un_itmc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_itmc>())).itmc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_itmc),
            "::",
            stringify!(itmc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_itmc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_itmc),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sec {
    pub sec: cty::c_uchar,
    pub BIT: un_sec__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_sec__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_sec__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_sec__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_sec__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sec__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sec__bindgen_ty_1))
    );
}
impl un_sec__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_sec() {
    assert_eq!(
        ::core::mem::size_of::<un_sec>(),
        1usize,
        concat!("Size of: ", stringify!(un_sec))
    );
    assert_eq!(
        ::core::mem::align_of::<un_sec>(),
        1usize,
        concat!("Alignment of ", stringify!(un_sec))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sec>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sec),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_sec>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_sec),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_min {
    pub min: cty::c_uchar,
    pub BIT: un_min__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_min__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_min__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_min__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_min__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_min__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_min__bindgen_ty_1))
    );
}
impl un_min__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_min() {
    assert_eq!(
        ::core::mem::size_of::<un_min>(),
        1usize,
        concat!("Size of: ", stringify!(un_min))
    );
    assert_eq!(
        ::core::mem::align_of::<un_min>(),
        1usize,
        concat!("Alignment of ", stringify!(un_min))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_min>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_min),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_min>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_min),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_hour {
    pub hour: cty::c_uchar,
    pub BIT: un_hour__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_hour__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_hour__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_hour__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_hour__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_hour__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_hour__bindgen_ty_1))
    );
}
impl un_hour__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_hour() {
    assert_eq!(
        ::core::mem::size_of::<un_hour>(),
        1usize,
        concat!("Size of: ", stringify!(un_hour))
    );
    assert_eq!(
        ::core::mem::align_of::<un_hour>(),
        1usize,
        concat!("Alignment of ", stringify!(un_hour))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_hour>())).hour as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_hour),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_hour>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_hour),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_week {
    pub week: cty::c_uchar,
    pub BIT: un_week__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_week__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_week__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_week__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_week__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_week__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_week__bindgen_ty_1))
    );
}
impl un_week__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_week() {
    assert_eq!(
        ::core::mem::size_of::<un_week>(),
        1usize,
        concat!("Size of: ", stringify!(un_week))
    );
    assert_eq!(
        ::core::mem::align_of::<un_week>(),
        1usize,
        concat!("Alignment of ", stringify!(un_week))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_week>())).week as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_week),
            "::",
            stringify!(week)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_week>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_week),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_day {
    pub day: cty::c_uchar,
    pub BIT: un_day__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_day__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_day__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_day__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_day__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_day__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_day__bindgen_ty_1))
    );
}
impl un_day__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_day() {
    assert_eq!(
        ::core::mem::size_of::<un_day>(),
        1usize,
        concat!("Size of: ", stringify!(un_day))
    );
    assert_eq!(
        ::core::mem::align_of::<un_day>(),
        1usize,
        concat!("Alignment of ", stringify!(un_day))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_day>())).day as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_day),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_day>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_day),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_month {
    pub month: cty::c_uchar,
    pub BIT: un_month__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_month__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_month__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_month__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_month__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_month__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_month__bindgen_ty_1))
    );
}
impl un_month__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_month() {
    assert_eq!(
        ::core::mem::size_of::<un_month>(),
        1usize,
        concat!("Size of: ", stringify!(un_month))
    );
    assert_eq!(
        ::core::mem::align_of::<un_month>(),
        1usize,
        concat!("Alignment of ", stringify!(un_month))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_month>())).month as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_month),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_month>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_month),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_year {
    pub year: cty::c_uchar,
    pub BIT: un_year__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_year__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_year__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_year__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_year__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_year__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_year__bindgen_ty_1))
    );
}
impl un_year__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_year() {
    assert_eq!(
        ::core::mem::size_of::<un_year>(),
        1usize,
        concat!("Size of: ", stringify!(un_year))
    );
    assert_eq!(
        ::core::mem::align_of::<un_year>(),
        1usize,
        concat!("Alignment of ", stringify!(un_year))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_year>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_year),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_year>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_year),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_subcud {
    pub subcud: cty::c_uchar,
    pub BIT: un_subcud__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_subcud__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_subcud__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_subcud__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_subcud__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_subcud__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_subcud__bindgen_ty_1))
    );
}
impl un_subcud__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_subcud() {
    assert_eq!(
        ::core::mem::size_of::<un_subcud>(),
        1usize,
        concat!("Size of: ", stringify!(un_subcud))
    );
    assert_eq!(
        ::core::mem::align_of::<un_subcud>(),
        1usize,
        concat!("Alignment of ", stringify!(un_subcud))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_subcud>())).subcud as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_subcud),
            "::",
            stringify!(subcud)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_subcud>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_subcud),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_alarmwm {
    pub alarmwm: cty::c_uchar,
    pub BIT: un_alarmwm__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_alarmwm__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_alarmwm__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_alarmwm__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_alarmwm__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_alarmwm__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_alarmwm__bindgen_ty_1))
    );
}
impl un_alarmwm__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_alarmwm() {
    assert_eq!(
        ::core::mem::size_of::<un_alarmwm>(),
        1usize,
        concat!("Size of: ", stringify!(un_alarmwm))
    );
    assert_eq!(
        ::core::mem::align_of::<un_alarmwm>(),
        1usize,
        concat!("Alignment of ", stringify!(un_alarmwm))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_alarmwm>())).alarmwm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_alarmwm),
            "::",
            stringify!(alarmwm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_alarmwm>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_alarmwm),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_alarmwh {
    pub alarmwh: cty::c_uchar,
    pub BIT: un_alarmwh__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_alarmwh__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_alarmwh__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_alarmwh__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_alarmwh__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_alarmwh__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_alarmwh__bindgen_ty_1))
    );
}
impl un_alarmwh__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_alarmwh() {
    assert_eq!(
        ::core::mem::size_of::<un_alarmwh>(),
        1usize,
        concat!("Size of: ", stringify!(un_alarmwh))
    );
    assert_eq!(
        ::core::mem::align_of::<un_alarmwh>(),
        1usize,
        concat!("Alignment of ", stringify!(un_alarmwh))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_alarmwh>())).alarmwh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_alarmwh),
            "::",
            stringify!(alarmwh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_alarmwh>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_alarmwh),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_alarmww {
    pub alarmww: cty::c_uchar,
    pub BIT: un_alarmww__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_alarmww__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_alarmww__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_alarmww__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_alarmww__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_alarmww__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_alarmww__bindgen_ty_1))
    );
}
impl un_alarmww__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_alarmww() {
    assert_eq!(
        ::core::mem::size_of::<un_alarmww>(),
        1usize,
        concat!("Size of: ", stringify!(un_alarmww))
    );
    assert_eq!(
        ::core::mem::align_of::<un_alarmww>(),
        1usize,
        concat!("Alignment of ", stringify!(un_alarmww))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_alarmww>())).alarmww as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_alarmww),
            "::",
            stringify!(alarmww)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_alarmww>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_alarmww),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rtcc0 {
    pub rtcc0: cty::c_uchar,
    pub BIT: un_rtcc0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rtcc0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rtcc0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rtcc0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rtcc0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rtcc0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rtcc0__bindgen_ty_1))
    );
}
impl un_rtcc0__bindgen_ty_1 {
    #[inline]
    pub fn rcloe1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rcloe1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtce(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rtce(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rcloe1: cty::c_uchar,
        rtce: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let rcloe1: u8 = unsafe { ::core::mem::transmute(rcloe1) };
            rcloe1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rtce: u8 = unsafe { ::core::mem::transmute(rtce) };
            rtce as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rtcc0() {
    assert_eq!(
        ::core::mem::size_of::<un_rtcc0>(),
        1usize,
        concat!("Size of: ", stringify!(un_rtcc0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rtcc0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rtcc0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rtcc0>())).rtcc0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rtcc0),
            "::",
            stringify!(rtcc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rtcc0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rtcc0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rtcc1 {
    pub rtcc1: cty::c_uchar,
    pub BIT: un_rtcc1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rtcc1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rtcc1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rtcc1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rtcc1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rtcc1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rtcc1__bindgen_ty_1))
    );
}
impl un_rtcc1__bindgen_ty_1 {
    #[inline]
    pub fn rwait(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rwait(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rwst(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rwst(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rifg(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rifg(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wafg(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wafg(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn walie(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_walie(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wale(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wale(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rwait: cty::c_uchar,
        rwst: cty::c_uchar,
        rifg: cty::c_uchar,
        wafg: cty::c_uchar,
        walie: cty::c_uchar,
        wale: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rwait: u8 = unsafe { ::core::mem::transmute(rwait) };
            rwait as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rwst: u8 = unsafe { ::core::mem::transmute(rwst) };
            rwst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rifg: u8 = unsafe { ::core::mem::transmute(rifg) };
            rifg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let wafg: u8 = unsafe { ::core::mem::transmute(wafg) };
            wafg as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let walie: u8 = unsafe { ::core::mem::transmute(walie) };
            walie as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let wale: u8 = unsafe { ::core::mem::transmute(wale) };
            wale as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rtcc1() {
    assert_eq!(
        ::core::mem::size_of::<un_rtcc1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rtcc1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rtcc1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rtcc1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rtcc1>())).rtcc1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rtcc1),
            "::",
            stringify!(rtcc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rtcc1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rtcc1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_cmc {
    pub cmc: cty::c_uchar,
    pub BIT: un_cmc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_cmc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_cmc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_cmc__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_cmc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_cmc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_cmc__bindgen_ty_1))
    );
}
impl un_cmc__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_cmc() {
    assert_eq!(
        ::core::mem::size_of::<un_cmc>(),
        1usize,
        concat!("Size of: ", stringify!(un_cmc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_cmc>(),
        1usize,
        concat!("Alignment of ", stringify!(un_cmc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_cmc>())).cmc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_cmc),
            "::",
            stringify!(cmc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_cmc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_cmc),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_csc {
    pub csc: cty::c_uchar,
    pub BIT: un_csc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_csc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_csc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_csc__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_csc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_csc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_csc__bindgen_ty_1))
    );
}
impl un_csc__bindgen_ty_1 {
    #[inline]
    pub fn hiostop(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_hiostop(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtstop(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_xtstop(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mstop(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mstop(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hiostop: cty::c_uchar,
        xtstop: cty::c_uchar,
        mstop: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hiostop: u8 = unsafe { ::core::mem::transmute(hiostop) };
            hiostop as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let xtstop: u8 = unsafe { ::core::mem::transmute(xtstop) };
            xtstop as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let mstop: u8 = unsafe { ::core::mem::transmute(mstop) };
            mstop as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_csc() {
    assert_eq!(
        ::core::mem::size_of::<un_csc>(),
        1usize,
        concat!("Size of: ", stringify!(un_csc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_csc>(),
        1usize,
        concat!("Alignment of ", stringify!(un_csc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_csc>())).csc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_csc),
            "::",
            stringify!(csc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_csc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_csc),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_ostc {
    pub ostc: cty::c_uchar,
    pub BIT: un_ostc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_ostc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_ostc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_ostc__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_ostc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_ostc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_ostc__bindgen_ty_1))
    );
}
impl un_ostc__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_ostc() {
    assert_eq!(
        ::core::mem::size_of::<un_ostc>(),
        1usize,
        concat!("Size of: ", stringify!(un_ostc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_ostc>(),
        1usize,
        concat!("Alignment of ", stringify!(un_ostc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_ostc>())).ostc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_ostc),
            "::",
            stringify!(ostc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_ostc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_ostc),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_osts {
    pub osts: cty::c_uchar,
    pub BIT: un_osts__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_osts__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_osts__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_osts__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_osts__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_osts__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_osts__bindgen_ty_1))
    );
}
impl un_osts__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_osts() {
    assert_eq!(
        ::core::mem::size_of::<un_osts>(),
        1usize,
        concat!("Size of: ", stringify!(un_osts))
    );
    assert_eq!(
        ::core::mem::align_of::<un_osts>(),
        1usize,
        concat!("Alignment of ", stringify!(un_osts))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_osts>())).osts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_osts),
            "::",
            stringify!(osts)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_osts>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_osts),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_ckc {
    pub ckc: cty::c_uchar,
    pub BIT: un_ckc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_ckc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_ckc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_ckc__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_ckc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_ckc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_ckc__bindgen_ty_1))
    );
}
impl un_ckc__bindgen_ty_1 {
    #[inline]
    pub fn sdiv(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_sdiv(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcm0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mcm0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcs(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mcs(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn css(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_css(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cls(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_cls(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sdiv: cty::c_uchar,
        mcm0: cty::c_uchar,
        mcs: cty::c_uchar,
        css: cty::c_uchar,
        cls: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sdiv: u8 = unsafe { ::core::mem::transmute(sdiv) };
            sdiv as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mcm0: u8 = unsafe { ::core::mem::transmute(mcm0) };
            mcm0 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mcs: u8 = unsafe { ::core::mem::transmute(mcs) };
            mcs as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let css: u8 = unsafe { ::core::mem::transmute(css) };
            css as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cls: u8 = unsafe { ::core::mem::transmute(cls) };
            cls as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_ckc() {
    assert_eq!(
        ::core::mem::size_of::<un_ckc>(),
        1usize,
        concat!("Size of: ", stringify!(un_ckc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_ckc>(),
        1usize,
        concat!("Alignment of ", stringify!(un_ckc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_ckc>())).ckc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_ckc),
            "::",
            stringify!(ckc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_ckc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_ckc),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_cks0 {
    pub cks0: cty::c_uchar,
    pub BIT: un_cks0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_cks0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_cks0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_cks0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_cks0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_cks0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_cks0__bindgen_ty_1))
    );
}
impl un_cks0__bindgen_ty_1 {
    #[inline]
    pub fn pcloe0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pcloe0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(pcloe0: cty::c_uchar) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pcloe0: u8 = unsafe { ::core::mem::transmute(pcloe0) };
            pcloe0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_cks0() {
    assert_eq!(
        ::core::mem::size_of::<un_cks0>(),
        1usize,
        concat!("Size of: ", stringify!(un_cks0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_cks0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_cks0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_cks0>())).cks0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_cks0),
            "::",
            stringify!(cks0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_cks0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_cks0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_cks1 {
    pub cks1: cty::c_uchar,
    pub BIT: un_cks1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_cks1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_cks1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_cks1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_cks1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_cks1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_cks1__bindgen_ty_1))
    );
}
impl un_cks1__bindgen_ty_1 {
    #[inline]
    pub fn pcloe1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pcloe1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(pcloe1: cty::c_uchar) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pcloe1: u8 = unsafe { ::core::mem::transmute(pcloe1) };
            pcloe1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_cks1() {
    assert_eq!(
        ::core::mem::size_of::<un_cks1>(),
        1usize,
        concat!("Size of: ", stringify!(un_cks1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_cks1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_cks1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_cks1>())).cks1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_cks1),
            "::",
            stringify!(cks1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_cks1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_cks1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_resf {
    pub resf: cty::c_uchar,
    pub BIT: un_resf__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_resf__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_resf__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_resf__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_resf__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_resf__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_resf__bindgen_ty_1))
    );
}
impl un_resf__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_resf() {
    assert_eq!(
        ::core::mem::size_of::<un_resf>(),
        1usize,
        concat!("Size of: ", stringify!(un_resf))
    );
    assert_eq!(
        ::core::mem::align_of::<un_resf>(),
        1usize,
        concat!("Alignment of ", stringify!(un_resf))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_resf>())).resf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_resf),
            "::",
            stringify!(resf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_resf>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_resf),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_lvim {
    pub lvim: cty::c_uchar,
    pub BIT: un_lvim__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_lvim__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_lvim__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_lvim__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_lvim__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_lvim__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_lvim__bindgen_ty_1))
    );
}
impl un_lvim__bindgen_ty_1 {
    #[inline]
    pub fn lvif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lviomsk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lviomsk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvisen(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvisen(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lvif: cty::c_uchar,
        lviomsk: cty::c_uchar,
        lvisen: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lvif: u8 = unsafe { ::core::mem::transmute(lvif) };
            lvif as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lviomsk: u8 = unsafe { ::core::mem::transmute(lviomsk) };
            lviomsk as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let lvisen: u8 = unsafe { ::core::mem::transmute(lvisen) };
            lvisen as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_lvim() {
    assert_eq!(
        ::core::mem::size_of::<un_lvim>(),
        1usize,
        concat!("Size of: ", stringify!(un_lvim))
    );
    assert_eq!(
        ::core::mem::align_of::<un_lvim>(),
        1usize,
        concat!("Alignment of ", stringify!(un_lvim))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_lvim>())).lvim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_lvim),
            "::",
            stringify!(lvim)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_lvim>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_lvim),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_lvis {
    pub lvis: cty::c_uchar,
    pub BIT: un_lvis__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_lvis__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_lvis__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_lvis__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_lvis__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_lvis__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_lvis__bindgen_ty_1))
    );
}
impl un_lvis__bindgen_ty_1 {
    #[inline]
    pub fn lvilv(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvilv(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvimd(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvimd(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lvilv: cty::c_uchar,
        lvimd: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lvilv: u8 = unsafe { ::core::mem::transmute(lvilv) };
            lvilv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let lvimd: u8 = unsafe { ::core::mem::transmute(lvimd) };
            lvimd as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_lvis() {
    assert_eq!(
        ::core::mem::size_of::<un_lvis>(),
        1usize,
        concat!("Size of: ", stringify!(un_lvis))
    );
    assert_eq!(
        ::core::mem::align_of::<un_lvis>(),
        1usize,
        concat!("Alignment of ", stringify!(un_lvis))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_lvis>())).lvis as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_lvis),
            "::",
            stringify!(lvis)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_lvis>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_lvis),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_wdte {
    pub wdte: cty::c_uchar,
    pub BIT: un_wdte__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_wdte__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_wdte__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_wdte__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_wdte__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_wdte__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_wdte__bindgen_ty_1))
    );
}
impl un_wdte__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_wdte() {
    assert_eq!(
        ::core::mem::size_of::<un_wdte>(),
        1usize,
        concat!("Size of: ", stringify!(un_wdte))
    );
    assert_eq!(
        ::core::mem::align_of::<un_wdte>(),
        1usize,
        concat!("Alignment of ", stringify!(un_wdte))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_wdte>())).wdte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_wdte),
            "::",
            stringify!(wdte)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_wdte>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_wdte),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_crcin {
    pub crcin: cty::c_uchar,
    pub BIT: un_crcin__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_crcin__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_crcin__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_crcin__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_crcin__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_crcin__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_crcin__bindgen_ty_1))
    );
}
impl un_crcin__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_crcin() {
    assert_eq!(
        ::core::mem::size_of::<un_crcin>(),
        1usize,
        concat!("Size of: ", stringify!(un_crcin))
    );
    assert_eq!(
        ::core::mem::align_of::<un_crcin>(),
        1usize,
        concat!("Alignment of ", stringify!(un_crcin))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_crcin>())).crcin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_crcin),
            "::",
            stringify!(crcin)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_crcin>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_crcin),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_rxb {
    pub rxb: cty::c_uchar,
    pub BIT: un_rxb__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_rxb__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_rxb__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_rxb__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxb__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxb__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxb__bindgen_ty_1))
    );
}
impl un_rxb__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_rxb() {
    assert_eq!(
        ::core::mem::size_of::<un_rxb>(),
        1usize,
        concat!("Size of: ", stringify!(un_rxb))
    );
    assert_eq!(
        ::core::mem::align_of::<un_rxb>(),
        1usize,
        concat!("Alignment of ", stringify!(un_rxb))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxb>())).rxb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxb),
            "::",
            stringify!(rxb)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_rxb>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_rxb),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_txs {
    pub txs: cty::c_uchar,
    pub BIT: un_txs__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_txs__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_txs__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_txs__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_txs__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txs__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txs__bindgen_ty_1))
    );
}
impl un_txs__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_txs() {
    assert_eq!(
        ::core::mem::size_of::<un_txs>(),
        1usize,
        concat!("Size of: ", stringify!(un_txs))
    );
    assert_eq!(
        ::core::mem::align_of::<un_txs>(),
        1usize,
        concat!("Alignment of ", stringify!(un_txs))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txs>())).txs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txs),
            "::",
            stringify!(txs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_txs>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_txs),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_monsta0 {
    pub monsta0: cty::c_uchar,
    pub BIT: un_monsta0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_monsta0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_monsta0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_monsta0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_monsta0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_monsta0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_monsta0__bindgen_ty_1))
    );
}
impl un_monsta0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_monsta0() {
    assert_eq!(
        ::core::mem::size_of::<un_monsta0>(),
        1usize,
        concat!("Size of: ", stringify!(un_monsta0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_monsta0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_monsta0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_monsta0>())).monsta0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_monsta0),
            "::",
            stringify!(monsta0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_monsta0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_monsta0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_asim {
    pub asim: cty::c_uchar,
    pub BIT: un_asim__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_asim__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_asim__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_asim__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_asim__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_asim__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_asim__bindgen_ty_1))
    );
}
impl un_asim__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_asim() {
    assert_eq!(
        ::core::mem::size_of::<un_asim>(),
        1usize,
        concat!("Size of: ", stringify!(un_asim))
    );
    assert_eq!(
        ::core::mem::align_of::<un_asim>(),
        1usize,
        concat!("Alignment of ", stringify!(un_asim))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_asim>())).asim as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_asim),
            "::",
            stringify!(asim)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_asim>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_asim),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dsa0 {
    pub dsa0: cty::c_uchar,
    pub BIT: un_dsa0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dsa0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dsa0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dsa0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dsa0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dsa0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dsa0__bindgen_ty_1))
    );
}
impl un_dsa0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dsa0() {
    assert_eq!(
        ::core::mem::size_of::<un_dsa0>(),
        1usize,
        concat!("Size of: ", stringify!(un_dsa0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dsa0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dsa0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dsa0>())).dsa0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dsa0),
            "::",
            stringify!(dsa0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dsa0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dsa0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dsa1 {
    pub dsa1: cty::c_uchar,
    pub BIT: un_dsa1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dsa1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dsa1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dsa1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dsa1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dsa1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dsa1__bindgen_ty_1))
    );
}
impl un_dsa1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dsa1() {
    assert_eq!(
        ::core::mem::size_of::<un_dsa1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dsa1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dsa1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dsa1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dsa1>())).dsa1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dsa1),
            "::",
            stringify!(dsa1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dsa1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dsa1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dra0 {
    pub dra0: cty::c_ushort,
    pub BIT: un_dra0__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_dra0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_dra0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra0__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_dra0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra0__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dra0__bindgen_ty_1))
    );
}
impl un_dra0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dra0() {
    assert_eq!(
        ::core::mem::size_of::<un_dra0>(),
        2usize,
        concat!("Size of: ", stringify!(un_dra0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra0>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dra0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra0>())).dra0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra0),
            "::",
            stringify!(dra0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dra0l {
    pub dra0l: cty::c_uchar,
    pub BIT: un_dra0l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dra0l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dra0l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra0l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra0l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra0l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra0l__bindgen_ty_1))
    );
}
impl un_dra0l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dra0l() {
    assert_eq!(
        ::core::mem::size_of::<un_dra0l>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra0l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra0l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra0l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra0l>())).dra0l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra0l),
            "::",
            stringify!(dra0l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra0l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra0l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dra0h {
    pub dra0h: cty::c_uchar,
    pub BIT: un_dra0h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dra0h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dra0h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra0h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra0h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra0h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra0h__bindgen_ty_1))
    );
}
impl un_dra0h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dra0h() {
    assert_eq!(
        ::core::mem::size_of::<un_dra0h>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra0h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra0h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra0h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra0h>())).dra0h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra0h),
            "::",
            stringify!(dra0h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra0h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra0h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dra1 {
    pub dra1: cty::c_ushort,
    pub BIT: un_dra1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_dra1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_dra1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra1__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_dra1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra1__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dra1__bindgen_ty_1))
    );
}
impl un_dra1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dra1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra1>(),
        2usize,
        concat!("Size of: ", stringify!(un_dra1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dra1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra1>())).dra1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra1),
            "::",
            stringify!(dra1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dra1l {
    pub dra1l: cty::c_uchar,
    pub BIT: un_dra1l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dra1l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dra1l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra1l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra1l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra1l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra1l__bindgen_ty_1))
    );
}
impl un_dra1l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dra1l() {
    assert_eq!(
        ::core::mem::size_of::<un_dra1l>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra1l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra1l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra1l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra1l>())).dra1l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra1l),
            "::",
            stringify!(dra1l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra1l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra1l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dra1h {
    pub dra1h: cty::c_uchar,
    pub BIT: un_dra1h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dra1h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dra1h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dra1h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra1h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra1h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra1h__bindgen_ty_1))
    );
}
impl un_dra1h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dra1h() {
    assert_eq!(
        ::core::mem::size_of::<un_dra1h>(),
        1usize,
        concat!("Size of: ", stringify!(un_dra1h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dra1h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dra1h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra1h>())).dra1h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra1h),
            "::",
            stringify!(dra1h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dra1h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dra1h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dbc0 {
    pub dbc0: cty::c_ushort,
    pub BIT: un_dbc0__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_dbc0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_dbc0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc0__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_dbc0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc0__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dbc0__bindgen_ty_1))
    );
}
impl un_dbc0__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dbc0() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc0>(),
        2usize,
        concat!("Size of: ", stringify!(un_dbc0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc0>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dbc0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc0>())).dbc0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc0),
            "::",
            stringify!(dbc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dbc0l {
    pub dbc0l: cty::c_uchar,
    pub BIT: un_dbc0l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dbc0l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dbc0l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc0l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc0l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc0l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc0l__bindgen_ty_1))
    );
}
impl un_dbc0l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dbc0l() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc0l>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc0l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc0l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc0l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc0l>())).dbc0l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc0l),
            "::",
            stringify!(dbc0l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc0l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc0l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dbc0h {
    pub dbc0h: cty::c_uchar,
    pub BIT: un_dbc0h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dbc0h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dbc0h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc0h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc0h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc0h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc0h__bindgen_ty_1))
    );
}
impl un_dbc0h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dbc0h() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc0h>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc0h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc0h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc0h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc0h>())).dbc0h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc0h),
            "::",
            stringify!(dbc0h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc0h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc0h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dbc1 {
    pub dbc1: cty::c_ushort,
    pub BIT: un_dbc1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_dbc1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_dbc1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc1__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_dbc1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc1__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dbc1__bindgen_ty_1))
    );
}
impl un_dbc1__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dbc1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc1>(),
        2usize,
        concat!("Size of: ", stringify!(un_dbc1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_dbc1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc1>())).dbc1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc1),
            "::",
            stringify!(dbc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dbc1l {
    pub dbc1l: cty::c_uchar,
    pub BIT: un_dbc1l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dbc1l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dbc1l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc1l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc1l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc1l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc1l__bindgen_ty_1))
    );
}
impl un_dbc1l__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dbc1l() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc1l>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc1l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc1l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc1l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc1l>())).dbc1l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc1l),
            "::",
            stringify!(dbc1l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc1l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc1l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dbc1h {
    pub dbc1h: cty::c_uchar,
    pub BIT: un_dbc1h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dbc1h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dbc1h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc1h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc1h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc1h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc1h__bindgen_ty_1))
    );
}
impl un_dbc1h__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_uchar,
        bit1: cty::c_uchar,
        bit2: cty::c_uchar,
        bit3: cty::c_uchar,
        bit4: cty::c_uchar,
        bit5: cty::c_uchar,
        bit6: cty::c_uchar,
        bit7: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u8 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u8 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u8 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u8 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u8 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u8 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u8 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u8 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dbc1h() {
    assert_eq!(
        ::core::mem::size_of::<un_dbc1h>(),
        1usize,
        concat!("Size of: ", stringify!(un_dbc1h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dbc1h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dbc1h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc1h>())).dbc1h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc1h),
            "::",
            stringify!(dbc1h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dbc1h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dbc1h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dmc0 {
    pub dmc0: cty::c_uchar,
    pub BIT: un_dmc0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dmc0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dmc0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dmc0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dmc0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dmc0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dmc0__bindgen_ty_1))
    );
}
impl un_dmc0__bindgen_ty_1 {
    #[inline]
    pub fn dwait0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dwait0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ds0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ds0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn drs0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drs0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stg0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stg0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dwait0: cty::c_uchar,
        ds0: cty::c_uchar,
        drs0: cty::c_uchar,
        stg0: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dwait0: u8 = unsafe { ::core::mem::transmute(dwait0) };
            dwait0 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ds0: u8 = unsafe { ::core::mem::transmute(ds0) };
            ds0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let drs0: u8 = unsafe { ::core::mem::transmute(drs0) };
            drs0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let stg0: u8 = unsafe { ::core::mem::transmute(stg0) };
            stg0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dmc0() {
    assert_eq!(
        ::core::mem::size_of::<un_dmc0>(),
        1usize,
        concat!("Size of: ", stringify!(un_dmc0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dmc0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dmc0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dmc0>())).dmc0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dmc0),
            "::",
            stringify!(dmc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dmc0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dmc0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_dmc1 {
    pub dmc1: cty::c_uchar,
    pub BIT: un_dmc1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_dmc1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_dmc1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_dmc1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dmc1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dmc1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dmc1__bindgen_ty_1))
    );
}
impl un_dmc1__bindgen_ty_1 {
    #[inline]
    pub fn dwait1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dwait1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ds1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ds1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn drs1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_drs1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stg1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stg1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dwait1: cty::c_uchar,
        ds1: cty::c_uchar,
        drs1: cty::c_uchar,
        stg1: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dwait1: u8 = unsafe { ::core::mem::transmute(dwait1) };
            dwait1 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ds1: u8 = unsafe { ::core::mem::transmute(ds1) };
            ds1 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let drs1: u8 = unsafe { ::core::mem::transmute(drs1) };
            drs1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let stg1: u8 = unsafe { ::core::mem::transmute(stg1) };
            stg1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_dmc1() {
    assert_eq!(
        ::core::mem::size_of::<un_dmc1>(),
        1usize,
        concat!("Size of: ", stringify!(un_dmc1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_dmc1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_dmc1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dmc1>())).dmc1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dmc1),
            "::",
            stringify!(dmc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_dmc1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_dmc1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_drc0 {
    pub drc0: cty::c_uchar,
    pub BIT: un_drc0__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_drc0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_drc0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_drc0__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_drc0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_drc0__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_drc0__bindgen_ty_1))
    );
}
impl un_drc0__bindgen_ty_1 {
    #[inline]
    pub fn dst0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dst0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn den0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_den0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dst0: cty::c_uchar,
        den0: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dst0: u8 = unsafe { ::core::mem::transmute(dst0) };
            dst0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let den0: u8 = unsafe { ::core::mem::transmute(den0) };
            den0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_drc0() {
    assert_eq!(
        ::core::mem::size_of::<un_drc0>(),
        1usize,
        concat!("Size of: ", stringify!(un_drc0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_drc0>(),
        1usize,
        concat!("Alignment of ", stringify!(un_drc0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_drc0>())).drc0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_drc0),
            "::",
            stringify!(drc0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_drc0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_drc0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_drc1 {
    pub drc1: cty::c_uchar,
    pub BIT: un_drc1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_drc1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_drc1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_drc1__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_drc1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_drc1__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_drc1__bindgen_ty_1))
    );
}
impl un_drc1__bindgen_ty_1 {
    #[inline]
    pub fn dst1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dst1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn den1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_den1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dst1: cty::c_uchar,
        den1: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dst1: u8 = unsafe { ::core::mem::transmute(dst1) };
            dst1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let den1: u8 = unsafe { ::core::mem::transmute(den1) };
            den1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_drc1() {
    assert_eq!(
        ::core::mem::size_of::<un_drc1>(),
        1usize,
        concat!("Size of: ", stringify!(un_drc1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_drc1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_drc1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_drc1>())).drc1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_drc1),
            "::",
            stringify!(drc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_drc1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_drc1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if2 {
    pub if2: cty::c_ushort,
    pub BIT: un_if2__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_if2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_if2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if2__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_if2__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if2__bindgen_ty_1))
    );
}
impl un_if2__bindgen_ty_1 {
    #[inline]
    pub fn tmif05(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif05(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif06(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif06(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif07(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif07(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmif05: cty::c_ushort,
        tmif06: cty::c_ushort,
        tmif07: cty::c_ushort,
        pif6: cty::c_ushort,
        pif7: cty::c_ushort,
        pif8: cty::c_ushort,
        pif9: cty::c_ushort,
        pif10: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmif05: u16 = unsafe { ::core::mem::transmute(tmif05) };
            tmif05 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmif06: u16 = unsafe { ::core::mem::transmute(tmif06) };
            tmif06 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif07: u16 = unsafe { ::core::mem::transmute(tmif07) };
            tmif07 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pif6: u16 = unsafe { ::core::mem::transmute(pif6) };
            pif6 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pif7: u16 = unsafe { ::core::mem::transmute(pif7) };
            pif7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pif8: u16 = unsafe { ::core::mem::transmute(pif8) };
            pif8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pif9: u16 = unsafe { ::core::mem::transmute(pif9) };
            pif9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pif10: u16 = unsafe { ::core::mem::transmute(pif10) };
            pif10 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if2() {
    assert_eq!(
        ::core::mem::size_of::<un_if2>(),
        2usize,
        concat!("Size of: ", stringify!(un_if2))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if2>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if2>())).if2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if2),
            "::",
            stringify!(if2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if2>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if2),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if2l {
    pub if2l: cty::c_uchar,
    pub BIT: un_if2l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if2l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if2l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if2l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if2l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if2l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if2l__bindgen_ty_1))
    );
}
impl un_if2l__bindgen_ty_1 {
    #[inline]
    pub fn tmif05(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif05(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif06(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif06(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif07(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif07(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif8(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif8(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif9(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif9(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmif05: cty::c_uchar,
        tmif06: cty::c_uchar,
        tmif07: cty::c_uchar,
        pif6: cty::c_uchar,
        pif7: cty::c_uchar,
        pif8: cty::c_uchar,
        pif9: cty::c_uchar,
        pif10: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmif05: u8 = unsafe { ::core::mem::transmute(tmif05) };
            tmif05 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmif06: u8 = unsafe { ::core::mem::transmute(tmif06) };
            tmif06 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif07: u8 = unsafe { ::core::mem::transmute(tmif07) };
            tmif07 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pif6: u8 = unsafe { ::core::mem::transmute(pif6) };
            pif6 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pif7: u8 = unsafe { ::core::mem::transmute(pif7) };
            pif7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pif8: u8 = unsafe { ::core::mem::transmute(pif8) };
            pif8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pif9: u8 = unsafe { ::core::mem::transmute(pif9) };
            pif9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pif10: u8 = unsafe { ::core::mem::transmute(pif10) };
            pif10 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if2l() {
    assert_eq!(
        ::core::mem::size_of::<un_if2l>(),
        1usize,
        concat!("Size of: ", stringify!(un_if2l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if2l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if2l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if2l>())).if2l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if2l),
            "::",
            stringify!(if2l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if2l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if2l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if2h {
    pub if2h: cty::c_uchar,
    pub BIT: un_if2h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if2h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if2h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if2h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if2h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if2h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if2h__bindgen_ty_1))
    );
}
impl un_if2h__bindgen_ty_1 {
    #[inline]
    pub fn pif11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif12(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif12(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif13h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif13h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mdif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mdif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicaif1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicaif1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pif11: cty::c_uchar,
        tmif10: cty::c_uchar,
        tmif11: cty::c_uchar,
        tmif12: cty::c_uchar,
        tmif13h: cty::c_uchar,
        mdif: cty::c_uchar,
        iicaif1: cty::c_uchar,
        flif: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pif11: u8 = unsafe { ::core::mem::transmute(pif11) };
            pif11 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmif10: u8 = unsafe { ::core::mem::transmute(tmif10) };
            tmif10 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif11: u8 = unsafe { ::core::mem::transmute(tmif11) };
            tmif11 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmif12: u8 = unsafe { ::core::mem::transmute(tmif12) };
            tmif12 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmif13h: u8 = unsafe { ::core::mem::transmute(tmif13h) };
            tmif13h as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mdif: u8 = unsafe { ::core::mem::transmute(mdif) };
            mdif as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let iicaif1: u8 = unsafe { ::core::mem::transmute(iicaif1) };
            iicaif1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let flif: u8 = unsafe { ::core::mem::transmute(flif) };
            flif as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if2h() {
    assert_eq!(
        ::core::mem::size_of::<un_if2h>(),
        1usize,
        concat!("Size of: ", stringify!(un_if2h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if2h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if2h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if2h>())).if2h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if2h),
            "::",
            stringify!(if2h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if2h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if2h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if3 {
    pub if3: cty::c_ushort,
    pub BIT: un_if3__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_if3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_if3__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if3__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_if3__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if3__bindgen_ty_1))
    );
}
impl un_if3__bindgen_ty_1 {
    #[inline]
    pub fn dmaif2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmaif2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmaif3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmaif3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif16(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif16(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif17(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif17(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmaif2: cty::c_ushort,
        dmaif3: cty::c_ushort,
        tmif14: cty::c_ushort,
        tmif15: cty::c_ushort,
        tmif16: cty::c_ushort,
        tmif17: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmaif2: u16 = unsafe { ::core::mem::transmute(dmaif2) };
            dmaif2 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmaif3: u16 = unsafe { ::core::mem::transmute(dmaif3) };
            dmaif3 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif14: u16 = unsafe { ::core::mem::transmute(tmif14) };
            tmif14 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmif15: u16 = unsafe { ::core::mem::transmute(tmif15) };
            tmif15 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmif16: u16 = unsafe { ::core::mem::transmute(tmif16) };
            tmif16 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmif17: u16 = unsafe { ::core::mem::transmute(tmif17) };
            tmif17 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if3() {
    assert_eq!(
        ::core::mem::size_of::<un_if3>(),
        2usize,
        concat!("Size of: ", stringify!(un_if3))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if3>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if3>())).if3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if3),
            "::",
            stringify!(if3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if3>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if3),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if3l {
    pub if3l: cty::c_uchar,
    pub BIT: un_if3l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if3l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if3l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if3l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if3l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if3l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if3l__bindgen_ty_1))
    );
}
impl un_if3l__bindgen_ty_1 {
    #[inline]
    pub fn dmaif2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmaif2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmaif3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmaif3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif14(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif14(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif15(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif15(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif16(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif16(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif17(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif17(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmaif2: cty::c_uchar,
        dmaif3: cty::c_uchar,
        tmif14: cty::c_uchar,
        tmif15: cty::c_uchar,
        tmif16: cty::c_uchar,
        tmif17: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmaif2: u8 = unsafe { ::core::mem::transmute(dmaif2) };
            dmaif2 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmaif3: u8 = unsafe { ::core::mem::transmute(dmaif3) };
            dmaif3 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif14: u8 = unsafe { ::core::mem::transmute(tmif14) };
            tmif14 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmif15: u8 = unsafe { ::core::mem::transmute(tmif15) };
            tmif15 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmif16: u8 = unsafe { ::core::mem::transmute(tmif16) };
            tmif16 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmif17: u8 = unsafe { ::core::mem::transmute(tmif17) };
            tmif17 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if3l() {
    assert_eq!(
        ::core::mem::size_of::<un_if3l>(),
        1usize,
        concat!("Size of: ", stringify!(un_if3l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if3l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if3l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if3l>())).if3l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if3l),
            "::",
            stringify!(if3l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if3l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if3l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk2 {
    pub mk2: cty::c_ushort,
    pub BIT: un_mk2__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mk2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_mk2__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk2__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk2__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk2__bindgen_ty_1))
    );
}
impl un_mk2__bindgen_ty_1 {
    #[inline]
    pub fn tmmk05(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk05(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk06(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk06(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk07(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk07(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmmk05: cty::c_ushort,
        tmmk06: cty::c_ushort,
        tmmk07: cty::c_ushort,
        pmk6: cty::c_ushort,
        pmk7: cty::c_ushort,
        pmk8: cty::c_ushort,
        pmk9: cty::c_ushort,
        pmk10: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmmk05: u16 = unsafe { ::core::mem::transmute(tmmk05) };
            tmmk05 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmmk06: u16 = unsafe { ::core::mem::transmute(tmmk06) };
            tmmk06 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk07: u16 = unsafe { ::core::mem::transmute(tmmk07) };
            tmmk07 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pmk6: u16 = unsafe { ::core::mem::transmute(pmk6) };
            pmk6 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pmk7: u16 = unsafe { ::core::mem::transmute(pmk7) };
            pmk7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pmk8: u16 = unsafe { ::core::mem::transmute(pmk8) };
            pmk8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pmk9: u16 = unsafe { ::core::mem::transmute(pmk9) };
            pmk9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pmk10: u16 = unsafe { ::core::mem::transmute(pmk10) };
            pmk10 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk2() {
    assert_eq!(
        ::core::mem::size_of::<un_mk2>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk2))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk2>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk2>())).mk2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk2),
            "::",
            stringify!(mk2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk2>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk2),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk2l {
    pub mk2l: cty::c_uchar,
    pub BIT: un_mk2l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk2l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk2l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk2l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk2l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk2l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk2l__bindgen_ty_1))
    );
}
impl un_mk2l__bindgen_ty_1 {
    #[inline]
    pub fn tmmk05(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk05(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk06(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk06(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk07(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk07(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk6(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk6(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk7(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk7(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk8(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk8(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk9(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk9(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmmk05: cty::c_uchar,
        tmmk06: cty::c_uchar,
        tmmk07: cty::c_uchar,
        pmk6: cty::c_uchar,
        pmk7: cty::c_uchar,
        pmk8: cty::c_uchar,
        pmk9: cty::c_uchar,
        pmk10: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmmk05: u8 = unsafe { ::core::mem::transmute(tmmk05) };
            tmmk05 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmmk06: u8 = unsafe { ::core::mem::transmute(tmmk06) };
            tmmk06 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk07: u8 = unsafe { ::core::mem::transmute(tmmk07) };
            tmmk07 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pmk6: u8 = unsafe { ::core::mem::transmute(pmk6) };
            pmk6 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pmk7: u8 = unsafe { ::core::mem::transmute(pmk7) };
            pmk7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pmk8: u8 = unsafe { ::core::mem::transmute(pmk8) };
            pmk8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pmk9: u8 = unsafe { ::core::mem::transmute(pmk9) };
            pmk9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pmk10: u8 = unsafe { ::core::mem::transmute(pmk10) };
            pmk10 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk2l() {
    assert_eq!(
        ::core::mem::size_of::<un_mk2l>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk2l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk2l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk2l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk2l>())).mk2l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk2l),
            "::",
            stringify!(mk2l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk2l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk2l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk2h {
    pub mk2h: cty::c_uchar,
    pub BIT: un_mk2h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk2h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk2h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk2h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk2h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk2h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk2h__bindgen_ty_1))
    );
}
impl un_mk2h__bindgen_ty_1 {
    #[inline]
    pub fn pmk11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk12(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk12(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk13h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk13h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mdmk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mdmk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicamk1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicamk1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flmk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flmk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pmk11: cty::c_uchar,
        tmmk10: cty::c_uchar,
        tmmk11: cty::c_uchar,
        tmmk12: cty::c_uchar,
        tmmk13h: cty::c_uchar,
        mdmk: cty::c_uchar,
        iicamk1: cty::c_uchar,
        flmk: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pmk11: u8 = unsafe { ::core::mem::transmute(pmk11) };
            pmk11 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmmk10: u8 = unsafe { ::core::mem::transmute(tmmk10) };
            tmmk10 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk11: u8 = unsafe { ::core::mem::transmute(tmmk11) };
            tmmk11 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmmk12: u8 = unsafe { ::core::mem::transmute(tmmk12) };
            tmmk12 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmmk13h: u8 = unsafe { ::core::mem::transmute(tmmk13h) };
            tmmk13h as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mdmk: u8 = unsafe { ::core::mem::transmute(mdmk) };
            mdmk as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let iicamk1: u8 = unsafe { ::core::mem::transmute(iicamk1) };
            iicamk1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let flmk: u8 = unsafe { ::core::mem::transmute(flmk) };
            flmk as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk2h() {
    assert_eq!(
        ::core::mem::size_of::<un_mk2h>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk2h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk2h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk2h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk2h>())).mk2h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk2h),
            "::",
            stringify!(mk2h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk2h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk2h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk3 {
    pub mk3: cty::c_ushort,
    pub BIT: un_mk3__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mk3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_mk3__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk3__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk3__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk3__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk3__bindgen_ty_1))
    );
}
impl un_mk3__bindgen_ty_1 {
    #[inline]
    pub fn dmamk2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmamk2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmamk3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmamk3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk16(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk16(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk17(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk17(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmamk2: cty::c_ushort,
        dmamk3: cty::c_ushort,
        tmmk14: cty::c_ushort,
        tmmk15: cty::c_ushort,
        tmmk16: cty::c_ushort,
        tmmk17: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmamk2: u16 = unsafe { ::core::mem::transmute(dmamk2) };
            dmamk2 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmamk3: u16 = unsafe { ::core::mem::transmute(dmamk3) };
            dmamk3 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk14: u16 = unsafe { ::core::mem::transmute(tmmk14) };
            tmmk14 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmmk15: u16 = unsafe { ::core::mem::transmute(tmmk15) };
            tmmk15 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmmk16: u16 = unsafe { ::core::mem::transmute(tmmk16) };
            tmmk16 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmmk17: u16 = unsafe { ::core::mem::transmute(tmmk17) };
            tmmk17 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk3() {
    assert_eq!(
        ::core::mem::size_of::<un_mk3>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk3))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk3>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk3))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk3>())).mk3 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk3),
            "::",
            stringify!(mk3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk3>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk3),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk3l {
    pub mk3l: cty::c_uchar,
    pub BIT: un_mk3l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk3l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk3l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk3l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk3l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk3l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk3l__bindgen_ty_1))
    );
}
impl un_mk3l__bindgen_ty_1 {
    #[inline]
    pub fn dmamk2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmamk2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmamk3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmamk3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk14(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk14(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk15(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk15(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk16(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk16(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk17(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk17(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmamk2: cty::c_uchar,
        dmamk3: cty::c_uchar,
        tmmk14: cty::c_uchar,
        tmmk15: cty::c_uchar,
        tmmk16: cty::c_uchar,
        tmmk17: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmamk2: u8 = unsafe { ::core::mem::transmute(dmamk2) };
            dmamk2 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmamk3: u8 = unsafe { ::core::mem::transmute(dmamk3) };
            dmamk3 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk14: u8 = unsafe { ::core::mem::transmute(tmmk14) };
            tmmk14 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmmk15: u8 = unsafe { ::core::mem::transmute(tmmk15) };
            tmmk15 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmmk16: u8 = unsafe { ::core::mem::transmute(tmmk16) };
            tmmk16 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmmk17: u8 = unsafe { ::core::mem::transmute(tmmk17) };
            tmmk17 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk3l() {
    assert_eq!(
        ::core::mem::size_of::<un_mk3l>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk3l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk3l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk3l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk3l>())).mk3l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk3l),
            "::",
            stringify!(mk3l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk3l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk3l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr02 {
    pub pr02: cty::c_ushort,
    pub BIT: un_pr02__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr02__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr02__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr02__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr02__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr02__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr02__bindgen_ty_1))
    );
}
impl un_pr02__bindgen_ty_1 {
    #[inline]
    pub fn tmpr005(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr005(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr006(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr006(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr007(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr007(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr06(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr06(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr07(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr07(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr08(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr08(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr09(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr09(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr010(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr010(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmpr005: cty::c_ushort,
        tmpr006: cty::c_ushort,
        tmpr007: cty::c_ushort,
        ppr06: cty::c_ushort,
        ppr07: cty::c_ushort,
        ppr08: cty::c_ushort,
        ppr09: cty::c_ushort,
        ppr010: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmpr005: u16 = unsafe { ::core::mem::transmute(tmpr005) };
            tmpr005 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmpr006: u16 = unsafe { ::core::mem::transmute(tmpr006) };
            tmpr006 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr007: u16 = unsafe { ::core::mem::transmute(tmpr007) };
            tmpr007 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr06: u16 = unsafe { ::core::mem::transmute(ppr06) };
            ppr06 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr07: u16 = unsafe { ::core::mem::transmute(ppr07) };
            ppr07 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr08: u16 = unsafe { ::core::mem::transmute(ppr08) };
            ppr08 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr09: u16 = unsafe { ::core::mem::transmute(ppr09) };
            ppr09 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr010: u16 = unsafe { ::core::mem::transmute(ppr010) };
            ppr010 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr02() {
    assert_eq!(
        ::core::mem::size_of::<un_pr02>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr02))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr02>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr02))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr02>())).pr02 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr02),
            "::",
            stringify!(pr02)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr02>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr02),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr02l {
    pub pr02l: cty::c_uchar,
    pub BIT: un_pr02l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr02l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr02l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr02l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr02l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr02l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr02l__bindgen_ty_1))
    );
}
impl un_pr02l__bindgen_ty_1 {
    #[inline]
    pub fn tmpr005(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr005(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr006(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr006(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr007(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr007(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr06(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr06(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr07(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr07(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr08(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr08(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr09(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr09(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr010(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr010(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmpr005: cty::c_uchar,
        tmpr006: cty::c_uchar,
        tmpr007: cty::c_uchar,
        ppr06: cty::c_uchar,
        ppr07: cty::c_uchar,
        ppr08: cty::c_uchar,
        ppr09: cty::c_uchar,
        ppr010: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmpr005: u8 = unsafe { ::core::mem::transmute(tmpr005) };
            tmpr005 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmpr006: u8 = unsafe { ::core::mem::transmute(tmpr006) };
            tmpr006 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr007: u8 = unsafe { ::core::mem::transmute(tmpr007) };
            tmpr007 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr06: u8 = unsafe { ::core::mem::transmute(ppr06) };
            ppr06 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr07: u8 = unsafe { ::core::mem::transmute(ppr07) };
            ppr07 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr08: u8 = unsafe { ::core::mem::transmute(ppr08) };
            ppr08 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr09: u8 = unsafe { ::core::mem::transmute(ppr09) };
            ppr09 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr010: u8 = unsafe { ::core::mem::transmute(ppr010) };
            ppr010 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr02l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr02l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr02l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr02l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr02l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr02l>())).pr02l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr02l),
            "::",
            stringify!(pr02l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr02l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr02l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr02h {
    pub pr02h: cty::c_uchar,
    pub BIT: un_pr02h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr02h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr02h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr02h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr02h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr02h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr02h__bindgen_ty_1))
    );
}
impl un_pr02h__bindgen_ty_1 {
    #[inline]
    pub fn ppr011(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr011(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr010(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr010(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr011(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr011(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr012(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr012(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr013h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr013h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mdpr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mdpr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicapr01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicapr01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flpr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flpr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ppr011: cty::c_uchar,
        tmpr010: cty::c_uchar,
        tmpr011: cty::c_uchar,
        tmpr012: cty::c_uchar,
        tmpr013h: cty::c_uchar,
        mdpr0: cty::c_uchar,
        iicapr01: cty::c_uchar,
        flpr0: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ppr011: u8 = unsafe { ::core::mem::transmute(ppr011) };
            ppr011 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmpr010: u8 = unsafe { ::core::mem::transmute(tmpr010) };
            tmpr010 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr011: u8 = unsafe { ::core::mem::transmute(tmpr011) };
            tmpr011 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmpr012: u8 = unsafe { ::core::mem::transmute(tmpr012) };
            tmpr012 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr013h: u8 = unsafe { ::core::mem::transmute(tmpr013h) };
            tmpr013h as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mdpr0: u8 = unsafe { ::core::mem::transmute(mdpr0) };
            mdpr0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let iicapr01: u8 = unsafe { ::core::mem::transmute(iicapr01) };
            iicapr01 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let flpr0: u8 = unsafe { ::core::mem::transmute(flpr0) };
            flpr0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr02h() {
    assert_eq!(
        ::core::mem::size_of::<un_pr02h>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr02h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr02h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr02h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr02h>())).pr02h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr02h),
            "::",
            stringify!(pr02h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr02h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr02h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr03 {
    pub pr03: cty::c_ushort,
    pub BIT: un_pr03__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr03__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr03__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr03__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr03__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr03__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr03__bindgen_ty_1))
    );
}
impl un_pr03__bindgen_ty_1 {
    #[inline]
    pub fn dmapr02(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmapr02(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr03(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmapr03(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr014(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr014(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr015(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr015(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr016(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr016(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr017(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr017(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmapr02: cty::c_ushort,
        dmapr03: cty::c_ushort,
        tmpr014: cty::c_ushort,
        tmpr015: cty::c_ushort,
        tmpr016: cty::c_ushort,
        tmpr017: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmapr02: u16 = unsafe { ::core::mem::transmute(dmapr02) };
            dmapr02 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmapr03: u16 = unsafe { ::core::mem::transmute(dmapr03) };
            dmapr03 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr014: u16 = unsafe { ::core::mem::transmute(tmpr014) };
            tmpr014 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmpr015: u16 = unsafe { ::core::mem::transmute(tmpr015) };
            tmpr015 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr016: u16 = unsafe { ::core::mem::transmute(tmpr016) };
            tmpr016 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr017: u16 = unsafe { ::core::mem::transmute(tmpr017) };
            tmpr017 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr03() {
    assert_eq!(
        ::core::mem::size_of::<un_pr03>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr03))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr03>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr03))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr03>())).pr03 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr03),
            "::",
            stringify!(pr03)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr03>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr03),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr03l {
    pub pr03l: cty::c_uchar,
    pub BIT: un_pr03l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr03l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr03l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr03l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr03l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr03l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr03l__bindgen_ty_1))
    );
}
impl un_pr03l__bindgen_ty_1 {
    #[inline]
    pub fn dmapr02(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr02(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr03(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr03(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr014(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr014(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr015(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr015(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr016(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr016(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr017(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr017(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmapr02: cty::c_uchar,
        dmapr03: cty::c_uchar,
        tmpr014: cty::c_uchar,
        tmpr015: cty::c_uchar,
        tmpr016: cty::c_uchar,
        tmpr017: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmapr02: u8 = unsafe { ::core::mem::transmute(dmapr02) };
            dmapr02 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmapr03: u8 = unsafe { ::core::mem::transmute(dmapr03) };
            dmapr03 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr014: u8 = unsafe { ::core::mem::transmute(tmpr014) };
            tmpr014 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmpr015: u8 = unsafe { ::core::mem::transmute(tmpr015) };
            tmpr015 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr016: u8 = unsafe { ::core::mem::transmute(tmpr016) };
            tmpr016 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr017: u8 = unsafe { ::core::mem::transmute(tmpr017) };
            tmpr017 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr03l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr03l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr03l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr03l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr03l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr03l>())).pr03l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr03l),
            "::",
            stringify!(pr03l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr03l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr03l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr12 {
    pub pr12: cty::c_ushort,
    pub BIT: un_pr12__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr12__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr12__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr12__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr12__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr12__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr12__bindgen_ty_1))
    );
}
impl un_pr12__bindgen_ty_1 {
    #[inline]
    pub fn tmpr105(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr105(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr106(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr106(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr107(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr107(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr16(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr16(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr17(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr17(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr18(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr18(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr19(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr19(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr110(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr110(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmpr105: cty::c_ushort,
        tmpr106: cty::c_ushort,
        tmpr107: cty::c_ushort,
        ppr16: cty::c_ushort,
        ppr17: cty::c_ushort,
        ppr18: cty::c_ushort,
        ppr19: cty::c_ushort,
        ppr110: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmpr105: u16 = unsafe { ::core::mem::transmute(tmpr105) };
            tmpr105 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmpr106: u16 = unsafe { ::core::mem::transmute(tmpr106) };
            tmpr106 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr107: u16 = unsafe { ::core::mem::transmute(tmpr107) };
            tmpr107 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr16: u16 = unsafe { ::core::mem::transmute(ppr16) };
            ppr16 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr17: u16 = unsafe { ::core::mem::transmute(ppr17) };
            ppr17 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr18: u16 = unsafe { ::core::mem::transmute(ppr18) };
            ppr18 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr19: u16 = unsafe { ::core::mem::transmute(ppr19) };
            ppr19 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr110: u16 = unsafe { ::core::mem::transmute(ppr110) };
            ppr110 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr12() {
    assert_eq!(
        ::core::mem::size_of::<un_pr12>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr12))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr12>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr12))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr12>())).pr12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr12),
            "::",
            stringify!(pr12)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr12>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr12),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr12l {
    pub pr12l: cty::c_uchar,
    pub BIT: un_pr12l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr12l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr12l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr12l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr12l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr12l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr12l__bindgen_ty_1))
    );
}
impl un_pr12l__bindgen_ty_1 {
    #[inline]
    pub fn tmpr105(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr105(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr106(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr106(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr107(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr107(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr16(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr16(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr17(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr17(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr18(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr18(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr19(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr19(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr110(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr110(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tmpr105: cty::c_uchar,
        tmpr106: cty::c_uchar,
        tmpr107: cty::c_uchar,
        ppr16: cty::c_uchar,
        ppr17: cty::c_uchar,
        ppr18: cty::c_uchar,
        ppr19: cty::c_uchar,
        ppr110: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tmpr105: u8 = unsafe { ::core::mem::transmute(tmpr105) };
            tmpr105 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmpr106: u8 = unsafe { ::core::mem::transmute(tmpr106) };
            tmpr106 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr107: u8 = unsafe { ::core::mem::transmute(tmpr107) };
            tmpr107 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr16: u8 = unsafe { ::core::mem::transmute(ppr16) };
            ppr16 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr17: u8 = unsafe { ::core::mem::transmute(ppr17) };
            ppr17 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr18: u8 = unsafe { ::core::mem::transmute(ppr18) };
            ppr18 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr19: u8 = unsafe { ::core::mem::transmute(ppr19) };
            ppr19 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr110: u8 = unsafe { ::core::mem::transmute(ppr110) };
            ppr110 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr12l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr12l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr12l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr12l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr12l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr12l>())).pr12l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr12l),
            "::",
            stringify!(pr12l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr12l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr12l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr12h {
    pub pr12h: cty::c_uchar,
    pub BIT: un_pr12h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr12h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr12h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr12h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr12h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr12h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr12h__bindgen_ty_1))
    );
}
impl un_pr12h__bindgen_ty_1 {
    #[inline]
    pub fn ppr111(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr111(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr110(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr110(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr111(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr111(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr112(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr112(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr113h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr113h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mdpr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mdpr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicapr11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicapr11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flpr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_flpr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ppr111: cty::c_uchar,
        tmpr110: cty::c_uchar,
        tmpr111: cty::c_uchar,
        tmpr112: cty::c_uchar,
        tmpr113h: cty::c_uchar,
        mdpr1: cty::c_uchar,
        iicapr11: cty::c_uchar,
        flpr1: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ppr111: u8 = unsafe { ::core::mem::transmute(ppr111) };
            ppr111 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tmpr110: u8 = unsafe { ::core::mem::transmute(tmpr110) };
            tmpr110 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr111: u8 = unsafe { ::core::mem::transmute(tmpr111) };
            tmpr111 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmpr112: u8 = unsafe { ::core::mem::transmute(tmpr112) };
            tmpr112 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr113h: u8 = unsafe { ::core::mem::transmute(tmpr113h) };
            tmpr113h as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mdpr1: u8 = unsafe { ::core::mem::transmute(mdpr1) };
            mdpr1 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let iicapr11: u8 = unsafe { ::core::mem::transmute(iicapr11) };
            iicapr11 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let flpr1: u8 = unsafe { ::core::mem::transmute(flpr1) };
            flpr1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr12h() {
    assert_eq!(
        ::core::mem::size_of::<un_pr12h>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr12h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr12h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr12h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr12h>())).pr12h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr12h),
            "::",
            stringify!(pr12h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr12h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr12h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr13 {
    pub pr13: cty::c_ushort,
    pub BIT: un_pr13__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr13__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr13__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr13__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr13__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr13__bindgen_ty_1))
    );
}
impl un_pr13__bindgen_ty_1 {
    #[inline]
    pub fn dmapr12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmapr12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_dmapr13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr114(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr114(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr115(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr115(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr116(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr116(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr117(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr117(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmapr12: cty::c_ushort,
        dmapr13: cty::c_ushort,
        tmpr114: cty::c_ushort,
        tmpr115: cty::c_ushort,
        tmpr116: cty::c_ushort,
        tmpr117: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmapr12: u16 = unsafe { ::core::mem::transmute(dmapr12) };
            dmapr12 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmapr13: u16 = unsafe { ::core::mem::transmute(dmapr13) };
            dmapr13 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr114: u16 = unsafe { ::core::mem::transmute(tmpr114) };
            tmpr114 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmpr115: u16 = unsafe { ::core::mem::transmute(tmpr115) };
            tmpr115 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr116: u16 = unsafe { ::core::mem::transmute(tmpr116) };
            tmpr116 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr117: u16 = unsafe { ::core::mem::transmute(tmpr117) };
            tmpr117 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr13() {
    assert_eq!(
        ::core::mem::size_of::<un_pr13>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr13))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr13>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr13))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr13>())).pr13 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr13),
            "::",
            stringify!(pr13)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr13>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr13),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr13l {
    pub pr13l: cty::c_uchar,
    pub BIT: un_pr13l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr13l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr13l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr13l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr13l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr13l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr13l__bindgen_ty_1))
    );
}
impl un_pr13l__bindgen_ty_1 {
    #[inline]
    pub fn dmapr12(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr12(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr13(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr13(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr114(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr114(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr115(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr115(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr116(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr116(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr117(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr117(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dmapr12: cty::c_uchar,
        dmapr13: cty::c_uchar,
        tmpr114: cty::c_uchar,
        tmpr115: cty::c_uchar,
        tmpr116: cty::c_uchar,
        tmpr117: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dmapr12: u8 = unsafe { ::core::mem::transmute(dmapr12) };
            dmapr12 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dmapr13: u8 = unsafe { ::core::mem::transmute(dmapr13) };
            dmapr13 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr114: u8 = unsafe { ::core::mem::transmute(tmpr114) };
            tmpr114 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tmpr115: u8 = unsafe { ::core::mem::transmute(tmpr115) };
            tmpr115 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr116: u8 = unsafe { ::core::mem::transmute(tmpr116) };
            tmpr116 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr117: u8 = unsafe { ::core::mem::transmute(tmpr117) };
            tmpr117 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr13l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr13l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr13l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr13l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr13l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr13l>())).pr13l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr13l),
            "::",
            stringify!(pr13l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr13l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr13l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if0 {
    pub if0: cty::c_ushort,
    pub BIT: un_if0__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_if0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_if0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if0__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_if0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if0__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if0__bindgen_ty_1))
    );
}
impl un_if0__bindgen_ty_1 {
    #[inline]
    pub fn wdtiif(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_wdtiif(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lviif(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lviif(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pif5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtiif: cty::c_ushort,
        lviif: cty::c_ushort,
        pif0: cty::c_ushort,
        pif1: cty::c_ushort,
        pif2: cty::c_ushort,
        pif3: cty::c_ushort,
        pif4: cty::c_ushort,
        pif5: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtiif: u16 = unsafe { ::core::mem::transmute(wdtiif) };
            wdtiif as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lviif: u16 = unsafe { ::core::mem::transmute(lviif) };
            lviif as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pif0: u16 = unsafe { ::core::mem::transmute(pif0) };
            pif0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pif1: u16 = unsafe { ::core::mem::transmute(pif1) };
            pif1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pif2: u16 = unsafe { ::core::mem::transmute(pif2) };
            pif2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pif3: u16 = unsafe { ::core::mem::transmute(pif3) };
            pif3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pif4: u16 = unsafe { ::core::mem::transmute(pif4) };
            pif4 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pif5: u16 = unsafe { ::core::mem::transmute(pif5) };
            pif5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if0() {
    assert_eq!(
        ::core::mem::size_of::<un_if0>(),
        2usize,
        concat!("Size of: ", stringify!(un_if0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if0>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if0>())).if0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if0),
            "::",
            stringify!(if0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if0l {
    pub if0l: cty::c_uchar,
    pub BIT: un_if0l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if0l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if0l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if0l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if0l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if0l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if0l__bindgen_ty_1))
    );
}
impl un_if0l__bindgen_ty_1 {
    #[inline]
    pub fn wdtiif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wdtiif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lviif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lviif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pif5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pif5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtiif: cty::c_uchar,
        lviif: cty::c_uchar,
        pif0: cty::c_uchar,
        pif1: cty::c_uchar,
        pif2: cty::c_uchar,
        pif3: cty::c_uchar,
        pif4: cty::c_uchar,
        pif5: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtiif: u8 = unsafe { ::core::mem::transmute(wdtiif) };
            wdtiif as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lviif: u8 = unsafe { ::core::mem::transmute(lviif) };
            lviif as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pif0: u8 = unsafe { ::core::mem::transmute(pif0) };
            pif0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pif1: u8 = unsafe { ::core::mem::transmute(pif1) };
            pif1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pif2: u8 = unsafe { ::core::mem::transmute(pif2) };
            pif2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pif3: u8 = unsafe { ::core::mem::transmute(pif3) };
            pif3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pif4: u8 = unsafe { ::core::mem::transmute(pif4) };
            pif4 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pif5: u8 = unsafe { ::core::mem::transmute(pif5) };
            pif5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if0l() {
    assert_eq!(
        ::core::mem::size_of::<un_if0l>(),
        1usize,
        concat!("Size of: ", stringify!(un_if0l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if0l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if0l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if0l>())).if0l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if0l),
            "::",
            stringify!(if0l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if0l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if0l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if0h {
    pub if0h: cty::c_uchar,
    pub BIT: un_if0h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if0h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if0h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if0h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if0h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if0h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if0h__bindgen_ty_1))
    );
}
impl un_if0h__bindgen_ty_1 {
    #[inline]
    pub fn stif2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stif2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srif2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srif2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif11h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif11h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmaif0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmaif0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmaif1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmaif1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stif0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stif0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srif0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srif0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif01h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif01h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stif2: cty::c_uchar,
        srif2: cty::c_uchar,
        tmif11h: cty::c_uchar,
        dmaif0: cty::c_uchar,
        dmaif1: cty::c_uchar,
        stif0: cty::c_uchar,
        srif0: cty::c_uchar,
        tmif01h: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stif2: u8 = unsafe { ::core::mem::transmute(stif2) };
            stif2 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srif2: u8 = unsafe { ::core::mem::transmute(srif2) };
            srif2 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif11h: u8 = unsafe { ::core::mem::transmute(tmif11h) };
            tmif11h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dmaif0: u8 = unsafe { ::core::mem::transmute(dmaif0) };
            dmaif0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dmaif1: u8 = unsafe { ::core::mem::transmute(dmaif1) };
            dmaif1 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let stif0: u8 = unsafe { ::core::mem::transmute(stif0) };
            stif0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let srif0: u8 = unsafe { ::core::mem::transmute(srif0) };
            srif0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmif01h: u8 = unsafe { ::core::mem::transmute(tmif01h) };
            tmif01h as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if0h() {
    assert_eq!(
        ::core::mem::size_of::<un_if0h>(),
        1usize,
        concat!("Size of: ", stringify!(un_if0h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if0h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if0h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if0h>())).if0h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if0h),
            "::",
            stringify!(if0h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if0h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if0h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if1 {
    pub if1: cty::c_ushort,
    pub BIT: un_if1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_if1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_if1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if1__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_if1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if1__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if1__bindgen_ty_1))
    );
}
impl un_if1__bindgen_ty_1 {
    #[inline]
    pub fn stif1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_stif1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srif1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_srif1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif03h(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif03h(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicaif0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_iicaif0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif00(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif00(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif01(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif01(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif02(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif02(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif03(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmif03(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stif1: cty::c_ushort,
        srif1: cty::c_ushort,
        tmif03h: cty::c_ushort,
        iicaif0: cty::c_ushort,
        tmif00: cty::c_ushort,
        tmif01: cty::c_ushort,
        tmif02: cty::c_ushort,
        tmif03: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stif1: u16 = unsafe { ::core::mem::transmute(stif1) };
            stif1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srif1: u16 = unsafe { ::core::mem::transmute(srif1) };
            srif1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif03h: u16 = unsafe { ::core::mem::transmute(tmif03h) };
            tmif03h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicaif0: u16 = unsafe { ::core::mem::transmute(iicaif0) };
            iicaif0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmif00: u16 = unsafe { ::core::mem::transmute(tmif00) };
            tmif00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmif01: u16 = unsafe { ::core::mem::transmute(tmif01) };
            tmif01 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmif02: u16 = unsafe { ::core::mem::transmute(tmif02) };
            tmif02 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmif03: u16 = unsafe { ::core::mem::transmute(tmif03) };
            tmif03 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if1() {
    assert_eq!(
        ::core::mem::size_of::<un_if1>(),
        2usize,
        concat!("Size of: ", stringify!(un_if1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_if1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if1>())).if1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if1),
            "::",
            stringify!(if1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if1l {
    pub if1l: cty::c_uchar,
    pub BIT: un_if1l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if1l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if1l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if1l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if1l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if1l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if1l__bindgen_ty_1))
    );
}
impl un_if1l__bindgen_ty_1 {
    #[inline]
    pub fn stif1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stif1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srif1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srif1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif03h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif03h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicaif0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicaif0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif02(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif02(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif03(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif03(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stif1: cty::c_uchar,
        srif1: cty::c_uchar,
        tmif03h: cty::c_uchar,
        iicaif0: cty::c_uchar,
        tmif00: cty::c_uchar,
        tmif01: cty::c_uchar,
        tmif02: cty::c_uchar,
        tmif03: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stif1: u8 = unsafe { ::core::mem::transmute(stif1) };
            stif1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srif1: u8 = unsafe { ::core::mem::transmute(srif1) };
            srif1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmif03h: u8 = unsafe { ::core::mem::transmute(tmif03h) };
            tmif03h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicaif0: u8 = unsafe { ::core::mem::transmute(iicaif0) };
            iicaif0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmif00: u8 = unsafe { ::core::mem::transmute(tmif00) };
            tmif00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmif01: u8 = unsafe { ::core::mem::transmute(tmif01) };
            tmif01 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmif02: u8 = unsafe { ::core::mem::transmute(tmif02) };
            tmif02 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmif03: u8 = unsafe { ::core::mem::transmute(tmif03) };
            tmif03 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if1l() {
    assert_eq!(
        ::core::mem::size_of::<un_if1l>(),
        1usize,
        concat!("Size of: ", stringify!(un_if1l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if1l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if1l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if1l>())).if1l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if1l),
            "::",
            stringify!(if1l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if1l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if1l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_if1h {
    pub if1h: cty::c_uchar,
    pub BIT: un_if1h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_if1h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_if1h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_if1h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_if1h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if1h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if1h__bindgen_ty_1))
    );
}
impl un_if1h__bindgen_ty_1 {
    #[inline]
    pub fn adif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_adif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtcif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rtcif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn itif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_itif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn krif(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_krif(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stif3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stif3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srif3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srif3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif13(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif13(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmif04(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmif04(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        adif: cty::c_uchar,
        rtcif: cty::c_uchar,
        itif: cty::c_uchar,
        krif: cty::c_uchar,
        stif3: cty::c_uchar,
        srif3: cty::c_uchar,
        tmif13: cty::c_uchar,
        tmif04: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let adif: u8 = unsafe { ::core::mem::transmute(adif) };
            adif as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtcif: u8 = unsafe { ::core::mem::transmute(rtcif) };
            rtcif as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let itif: u8 = unsafe { ::core::mem::transmute(itif) };
            itif as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let krif: u8 = unsafe { ::core::mem::transmute(krif) };
            krif as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let stif3: u8 = unsafe { ::core::mem::transmute(stif3) };
            stif3 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let srif3: u8 = unsafe { ::core::mem::transmute(srif3) };
            srif3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmif13: u8 = unsafe { ::core::mem::transmute(tmif13) };
            tmif13 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmif04: u8 = unsafe { ::core::mem::transmute(tmif04) };
            tmif04 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_if1h() {
    assert_eq!(
        ::core::mem::size_of::<un_if1h>(),
        1usize,
        concat!("Size of: ", stringify!(un_if1h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_if1h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_if1h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if1h>())).if1h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if1h),
            "::",
            stringify!(if1h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_if1h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_if1h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk0 {
    pub mk0: cty::c_ushort,
    pub BIT: un_mk0__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mk0__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_mk0__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk0__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk0__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk0__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk0__bindgen_ty_1))
    );
}
impl un_mk0__bindgen_ty_1 {
    #[inline]
    pub fn wdtimk(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_wdtimk(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvimk(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lvimk(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pmk5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtimk: cty::c_ushort,
        lvimk: cty::c_ushort,
        pmk0: cty::c_ushort,
        pmk1: cty::c_ushort,
        pmk2: cty::c_ushort,
        pmk3: cty::c_ushort,
        pmk4: cty::c_ushort,
        pmk5: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtimk: u16 = unsafe { ::core::mem::transmute(wdtimk) };
            wdtimk as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lvimk: u16 = unsafe { ::core::mem::transmute(lvimk) };
            lvimk as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pmk0: u16 = unsafe { ::core::mem::transmute(pmk0) };
            pmk0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pmk1: u16 = unsafe { ::core::mem::transmute(pmk1) };
            pmk1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pmk2: u16 = unsafe { ::core::mem::transmute(pmk2) };
            pmk2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pmk3: u16 = unsafe { ::core::mem::transmute(pmk3) };
            pmk3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pmk4: u16 = unsafe { ::core::mem::transmute(pmk4) };
            pmk4 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pmk5: u16 = unsafe { ::core::mem::transmute(pmk5) };
            pmk5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk0() {
    assert_eq!(
        ::core::mem::size_of::<un_mk0>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk0))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk0>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk0))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk0>())).mk0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk0),
            "::",
            stringify!(mk0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk0>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk0),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk0l {
    pub mk0l: cty::c_uchar,
    pub BIT: un_mk0l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk0l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk0l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk0l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk0l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk0l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk0l__bindgen_ty_1))
    );
}
impl un_mk0l__bindgen_ty_1 {
    #[inline]
    pub fn wdtimk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wdtimk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvimk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvimk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk4(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk4(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pmk5(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pmk5(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtimk: cty::c_uchar,
        lvimk: cty::c_uchar,
        pmk0: cty::c_uchar,
        pmk1: cty::c_uchar,
        pmk2: cty::c_uchar,
        pmk3: cty::c_uchar,
        pmk4: cty::c_uchar,
        pmk5: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtimk: u8 = unsafe { ::core::mem::transmute(wdtimk) };
            wdtimk as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lvimk: u8 = unsafe { ::core::mem::transmute(lvimk) };
            lvimk as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pmk0: u8 = unsafe { ::core::mem::transmute(pmk0) };
            pmk0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pmk1: u8 = unsafe { ::core::mem::transmute(pmk1) };
            pmk1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pmk2: u8 = unsafe { ::core::mem::transmute(pmk2) };
            pmk2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pmk3: u8 = unsafe { ::core::mem::transmute(pmk3) };
            pmk3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pmk4: u8 = unsafe { ::core::mem::transmute(pmk4) };
            pmk4 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pmk5: u8 = unsafe { ::core::mem::transmute(pmk5) };
            pmk5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk0l() {
    assert_eq!(
        ::core::mem::size_of::<un_mk0l>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk0l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk0l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk0l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk0l>())).mk0l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk0l),
            "::",
            stringify!(mk0l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk0l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk0l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk0h {
    pub mk0h: cty::c_uchar,
    pub BIT: un_mk0h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk0h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk0h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk0h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk0h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk0h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk0h__bindgen_ty_1))
    );
}
impl un_mk0h__bindgen_ty_1 {
    #[inline]
    pub fn stmk2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stmk2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srmk2(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srmk2(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk11h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk11h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmamk0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmamk0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmamk1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmamk1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stmk0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stmk0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srmk0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srmk0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk01h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk01h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stmk2: cty::c_uchar,
        srmk2: cty::c_uchar,
        tmmk11h: cty::c_uchar,
        dmamk0: cty::c_uchar,
        dmamk1: cty::c_uchar,
        stmk0: cty::c_uchar,
        srmk0: cty::c_uchar,
        tmmk01h: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stmk2: u8 = unsafe { ::core::mem::transmute(stmk2) };
            stmk2 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srmk2: u8 = unsafe { ::core::mem::transmute(srmk2) };
            srmk2 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk11h: u8 = unsafe { ::core::mem::transmute(tmmk11h) };
            tmmk11h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dmamk0: u8 = unsafe { ::core::mem::transmute(dmamk0) };
            dmamk0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dmamk1: u8 = unsafe { ::core::mem::transmute(dmamk1) };
            dmamk1 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let stmk0: u8 = unsafe { ::core::mem::transmute(stmk0) };
            stmk0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let srmk0: u8 = unsafe { ::core::mem::transmute(srmk0) };
            srmk0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmmk01h: u8 = unsafe { ::core::mem::transmute(tmmk01h) };
            tmmk01h as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk0h() {
    assert_eq!(
        ::core::mem::size_of::<un_mk0h>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk0h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk0h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk0h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk0h>())).mk0h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk0h),
            "::",
            stringify!(mk0h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk0h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk0h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk1 {
    pub mk1: cty::c_ushort,
    pub BIT: un_mk1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mk1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_mk1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk1__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk1__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk1__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk1__bindgen_ty_1))
    );
}
impl un_mk1__bindgen_ty_1 {
    #[inline]
    pub fn stmk1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_stmk1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srmk1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_srmk1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk03h(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk03h(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicamk0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_iicamk0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk00(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk00(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk01(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk01(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk02(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk02(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk03(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmmk03(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stmk1: cty::c_ushort,
        srmk1: cty::c_ushort,
        tmmk03h: cty::c_ushort,
        iicamk0: cty::c_ushort,
        tmmk00: cty::c_ushort,
        tmmk01: cty::c_ushort,
        tmmk02: cty::c_ushort,
        tmmk03: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stmk1: u16 = unsafe { ::core::mem::transmute(stmk1) };
            stmk1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srmk1: u16 = unsafe { ::core::mem::transmute(srmk1) };
            srmk1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk03h: u16 = unsafe { ::core::mem::transmute(tmmk03h) };
            tmmk03h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicamk0: u16 = unsafe { ::core::mem::transmute(iicamk0) };
            iicamk0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmmk00: u16 = unsafe { ::core::mem::transmute(tmmk00) };
            tmmk00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmmk01: u16 = unsafe { ::core::mem::transmute(tmmk01) };
            tmmk01 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmmk02: u16 = unsafe { ::core::mem::transmute(tmmk02) };
            tmmk02 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmmk03: u16 = unsafe { ::core::mem::transmute(tmmk03) };
            tmmk03 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mk1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mk1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk1>())).mk1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk1),
            "::",
            stringify!(mk1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk1>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk1),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk1l {
    pub mk1l: cty::c_uchar,
    pub BIT: un_mk1l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk1l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk1l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk1l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk1l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk1l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk1l__bindgen_ty_1))
    );
}
impl un_mk1l__bindgen_ty_1 {
    #[inline]
    pub fn stmk1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stmk1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srmk1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srmk1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk03h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk03h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicamk0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicamk0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk02(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk02(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk03(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk03(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stmk1: cty::c_uchar,
        srmk1: cty::c_uchar,
        tmmk03h: cty::c_uchar,
        iicamk0: cty::c_uchar,
        tmmk00: cty::c_uchar,
        tmmk01: cty::c_uchar,
        tmmk02: cty::c_uchar,
        tmmk03: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stmk1: u8 = unsafe { ::core::mem::transmute(stmk1) };
            stmk1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srmk1: u8 = unsafe { ::core::mem::transmute(srmk1) };
            srmk1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmmk03h: u8 = unsafe { ::core::mem::transmute(tmmk03h) };
            tmmk03h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicamk0: u8 = unsafe { ::core::mem::transmute(iicamk0) };
            iicamk0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmmk00: u8 = unsafe { ::core::mem::transmute(tmmk00) };
            tmmk00 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmmk01: u8 = unsafe { ::core::mem::transmute(tmmk01) };
            tmmk01 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmmk02: u8 = unsafe { ::core::mem::transmute(tmmk02) };
            tmmk02 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmmk03: u8 = unsafe { ::core::mem::transmute(tmmk03) };
            tmmk03 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk1l() {
    assert_eq!(
        ::core::mem::size_of::<un_mk1l>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk1l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk1l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk1l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk1l>())).mk1l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk1l),
            "::",
            stringify!(mk1l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk1l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk1l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mk1h {
    pub mk1h: cty::c_uchar,
    pub BIT: un_mk1h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_mk1h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_mk1h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mk1h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk1h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk1h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk1h__bindgen_ty_1))
    );
}
impl un_mk1h__bindgen_ty_1 {
    #[inline]
    pub fn admk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_admk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtcmk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rtcmk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn itmk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_itmk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn krmk(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_krmk(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stmk3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stmk3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srmk3(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srmk3(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk13(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk13(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmmk04(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmmk04(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        admk: cty::c_uchar,
        rtcmk: cty::c_uchar,
        itmk: cty::c_uchar,
        krmk: cty::c_uchar,
        stmk3: cty::c_uchar,
        srmk3: cty::c_uchar,
        tmmk13: cty::c_uchar,
        tmmk04: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let admk: u8 = unsafe { ::core::mem::transmute(admk) };
            admk as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtcmk: u8 = unsafe { ::core::mem::transmute(rtcmk) };
            rtcmk as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let itmk: u8 = unsafe { ::core::mem::transmute(itmk) };
            itmk as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let krmk: u8 = unsafe { ::core::mem::transmute(krmk) };
            krmk as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let stmk3: u8 = unsafe { ::core::mem::transmute(stmk3) };
            stmk3 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let srmk3: u8 = unsafe { ::core::mem::transmute(srmk3) };
            srmk3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmmk13: u8 = unsafe { ::core::mem::transmute(tmmk13) };
            tmmk13 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmmk04: u8 = unsafe { ::core::mem::transmute(tmmk04) };
            tmmk04 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mk1h() {
    assert_eq!(
        ::core::mem::size_of::<un_mk1h>(),
        1usize,
        concat!("Size of: ", stringify!(un_mk1h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mk1h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_mk1h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk1h>())).mk1h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk1h),
            "::",
            stringify!(mk1h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mk1h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mk1h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr00 {
    pub pr00: cty::c_ushort,
    pub BIT: un_pr00__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr00__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr00__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr00__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr00__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr00__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr00__bindgen_ty_1))
    );
}
impl un_pr00__bindgen_ty_1 {
    #[inline]
    pub fn wdtipr0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_wdtipr0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvipr0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lvipr0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr00(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr00(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr01(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr01(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr02(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr02(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr03(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr03(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr04(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr04(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr05(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr05(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtipr0: cty::c_ushort,
        lvipr0: cty::c_ushort,
        ppr00: cty::c_ushort,
        ppr01: cty::c_ushort,
        ppr02: cty::c_ushort,
        ppr03: cty::c_ushort,
        ppr04: cty::c_ushort,
        ppr05: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtipr0: u16 = unsafe { ::core::mem::transmute(wdtipr0) };
            wdtipr0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lvipr0: u16 = unsafe { ::core::mem::transmute(lvipr0) };
            lvipr0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ppr00: u16 = unsafe { ::core::mem::transmute(ppr00) };
            ppr00 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr01: u16 = unsafe { ::core::mem::transmute(ppr01) };
            ppr01 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr02: u16 = unsafe { ::core::mem::transmute(ppr02) };
            ppr02 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr03: u16 = unsafe { ::core::mem::transmute(ppr03) };
            ppr03 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr04: u16 = unsafe { ::core::mem::transmute(ppr04) };
            ppr04 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr05: u16 = unsafe { ::core::mem::transmute(ppr05) };
            ppr05 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr00() {
    assert_eq!(
        ::core::mem::size_of::<un_pr00>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr00))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr00>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr00))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr00>())).pr00 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr00),
            "::",
            stringify!(pr00)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr00>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr00),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr00l {
    pub pr00l: cty::c_uchar,
    pub BIT: un_pr00l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr00l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr00l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr00l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr00l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr00l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr00l__bindgen_ty_1))
    );
}
impl un_pr00l__bindgen_ty_1 {
    #[inline]
    pub fn wdtipr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wdtipr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvipr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvipr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr02(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr02(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr03(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr03(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr04(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr04(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr05(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr05(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtipr0: cty::c_uchar,
        lvipr0: cty::c_uchar,
        ppr00: cty::c_uchar,
        ppr01: cty::c_uchar,
        ppr02: cty::c_uchar,
        ppr03: cty::c_uchar,
        ppr04: cty::c_uchar,
        ppr05: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtipr0: u8 = unsafe { ::core::mem::transmute(wdtipr0) };
            wdtipr0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lvipr0: u8 = unsafe { ::core::mem::transmute(lvipr0) };
            lvipr0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ppr00: u8 = unsafe { ::core::mem::transmute(ppr00) };
            ppr00 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr01: u8 = unsafe { ::core::mem::transmute(ppr01) };
            ppr01 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr02: u8 = unsafe { ::core::mem::transmute(ppr02) };
            ppr02 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr03: u8 = unsafe { ::core::mem::transmute(ppr03) };
            ppr03 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr04: u8 = unsafe { ::core::mem::transmute(ppr04) };
            ppr04 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr05: u8 = unsafe { ::core::mem::transmute(ppr05) };
            ppr05 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr00l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr00l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr00l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr00l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr00l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr00l>())).pr00l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr00l),
            "::",
            stringify!(pr00l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr00l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr00l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr00h {
    pub pr00h: cty::c_uchar,
    pub BIT: un_pr00h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr00h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr00h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr00h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr00h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr00h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr00h__bindgen_ty_1))
    );
}
impl un_pr00h__bindgen_ty_1 {
    #[inline]
    pub fn stpr02(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr02(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr02(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr02(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr011h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr011h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stpr00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr001h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr001h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stpr02: cty::c_uchar,
        srpr02: cty::c_uchar,
        tmpr011h: cty::c_uchar,
        dmapr00: cty::c_uchar,
        dmapr01: cty::c_uchar,
        stpr00: cty::c_uchar,
        srpr00: cty::c_uchar,
        tmpr001h: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stpr02: u8 = unsafe { ::core::mem::transmute(stpr02) };
            stpr02 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srpr02: u8 = unsafe { ::core::mem::transmute(srpr02) };
            srpr02 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr011h: u8 = unsafe { ::core::mem::transmute(tmpr011h) };
            tmpr011h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dmapr00: u8 = unsafe { ::core::mem::transmute(dmapr00) };
            dmapr00 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dmapr01: u8 = unsafe { ::core::mem::transmute(dmapr01) };
            dmapr01 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let stpr00: u8 = unsafe { ::core::mem::transmute(stpr00) };
            stpr00 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let srpr00: u8 = unsafe { ::core::mem::transmute(srpr00) };
            srpr00 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr001h: u8 = unsafe { ::core::mem::transmute(tmpr001h) };
            tmpr001h as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr00h() {
    assert_eq!(
        ::core::mem::size_of::<un_pr00h>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr00h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr00h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr00h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr00h>())).pr00h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr00h),
            "::",
            stringify!(pr00h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr00h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr00h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr01 {
    pub pr01: cty::c_ushort,
    pub BIT: un_pr01__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr01__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr01__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr01__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr01__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr01__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr01__bindgen_ty_1))
    );
}
impl un_pr01__bindgen_ty_1 {
    #[inline]
    pub fn stpr01(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_stpr01(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr01(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_srpr01(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr003h(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr003h(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicapr00(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_iicapr00(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr000(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr000(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr001(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr001(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr002(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr002(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr003(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr003(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stpr01: cty::c_ushort,
        srpr01: cty::c_ushort,
        tmpr003h: cty::c_ushort,
        iicapr00: cty::c_ushort,
        tmpr000: cty::c_ushort,
        tmpr001: cty::c_ushort,
        tmpr002: cty::c_ushort,
        tmpr003: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stpr01: u16 = unsafe { ::core::mem::transmute(stpr01) };
            stpr01 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srpr01: u16 = unsafe { ::core::mem::transmute(srpr01) };
            srpr01 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr003h: u16 = unsafe { ::core::mem::transmute(tmpr003h) };
            tmpr003h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicapr00: u16 = unsafe { ::core::mem::transmute(iicapr00) };
            iicapr00 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr000: u16 = unsafe { ::core::mem::transmute(tmpr000) };
            tmpr000 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr001: u16 = unsafe { ::core::mem::transmute(tmpr001) };
            tmpr001 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmpr002: u16 = unsafe { ::core::mem::transmute(tmpr002) };
            tmpr002 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr003: u16 = unsafe { ::core::mem::transmute(tmpr003) };
            tmpr003 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr01() {
    assert_eq!(
        ::core::mem::size_of::<un_pr01>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr01))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr01>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr01))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr01>())).pr01 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr01),
            "::",
            stringify!(pr01)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr01>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr01),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr01l {
    pub pr01l: cty::c_uchar,
    pub BIT: un_pr01l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr01l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr01l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr01l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr01l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr01l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr01l__bindgen_ty_1))
    );
}
impl un_pr01l__bindgen_ty_1 {
    #[inline]
    pub fn stpr01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr01(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr01(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr003h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr003h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicapr00(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicapr00(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr000(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr000(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr001(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr001(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr002(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr002(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr003(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr003(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stpr01: cty::c_uchar,
        srpr01: cty::c_uchar,
        tmpr003h: cty::c_uchar,
        iicapr00: cty::c_uchar,
        tmpr000: cty::c_uchar,
        tmpr001: cty::c_uchar,
        tmpr002: cty::c_uchar,
        tmpr003: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stpr01: u8 = unsafe { ::core::mem::transmute(stpr01) };
            stpr01 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srpr01: u8 = unsafe { ::core::mem::transmute(srpr01) };
            srpr01 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr003h: u8 = unsafe { ::core::mem::transmute(tmpr003h) };
            tmpr003h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicapr00: u8 = unsafe { ::core::mem::transmute(iicapr00) };
            iicapr00 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr000: u8 = unsafe { ::core::mem::transmute(tmpr000) };
            tmpr000 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr001: u8 = unsafe { ::core::mem::transmute(tmpr001) };
            tmpr001 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmpr002: u8 = unsafe { ::core::mem::transmute(tmpr002) };
            tmpr002 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr003: u8 = unsafe { ::core::mem::transmute(tmpr003) };
            tmpr003 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr01l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr01l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr01l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr01l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr01l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr01l>())).pr01l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr01l),
            "::",
            stringify!(pr01l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr01l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr01l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr01h {
    pub pr01h: cty::c_uchar,
    pub BIT: un_pr01h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr01h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr01h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr01h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr01h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr01h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr01h__bindgen_ty_1))
    );
}
impl un_pr01h__bindgen_ty_1 {
    #[inline]
    pub fn adpr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_adpr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtcpr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rtcpr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn itpr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_itpr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn krpr0(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_krpr0(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stpr03(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr03(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr03(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr03(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr013(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr013(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr004(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr004(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        adpr0: cty::c_uchar,
        rtcpr0: cty::c_uchar,
        itpr0: cty::c_uchar,
        krpr0: cty::c_uchar,
        stpr03: cty::c_uchar,
        srpr03: cty::c_uchar,
        tmpr013: cty::c_uchar,
        tmpr004: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let adpr0: u8 = unsafe { ::core::mem::transmute(adpr0) };
            adpr0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtcpr0: u8 = unsafe { ::core::mem::transmute(rtcpr0) };
            rtcpr0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let itpr0: u8 = unsafe { ::core::mem::transmute(itpr0) };
            itpr0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let krpr0: u8 = unsafe { ::core::mem::transmute(krpr0) };
            krpr0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let stpr03: u8 = unsafe { ::core::mem::transmute(stpr03) };
            stpr03 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let srpr03: u8 = unsafe { ::core::mem::transmute(srpr03) };
            srpr03 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmpr013: u8 = unsafe { ::core::mem::transmute(tmpr013) };
            tmpr013 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr004: u8 = unsafe { ::core::mem::transmute(tmpr004) };
            tmpr004 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr01h() {
    assert_eq!(
        ::core::mem::size_of::<un_pr01h>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr01h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr01h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr01h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr01h>())).pr01h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr01h),
            "::",
            stringify!(pr01h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr01h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr01h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr10 {
    pub pr10: cty::c_ushort,
    pub BIT: un_pr10__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr10__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr10__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr10__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr10__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr10__bindgen_ty_1))
    );
}
impl un_pr10__bindgen_ty_1 {
    #[inline]
    pub fn wdtipr1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_wdtipr1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvipr1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lvipr1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ppr15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtipr1: cty::c_ushort,
        lvipr1: cty::c_ushort,
        ppr10: cty::c_ushort,
        ppr11: cty::c_ushort,
        ppr12: cty::c_ushort,
        ppr13: cty::c_ushort,
        ppr14: cty::c_ushort,
        ppr15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtipr1: u16 = unsafe { ::core::mem::transmute(wdtipr1) };
            wdtipr1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lvipr1: u16 = unsafe { ::core::mem::transmute(lvipr1) };
            lvipr1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ppr10: u16 = unsafe { ::core::mem::transmute(ppr10) };
            ppr10 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr11: u16 = unsafe { ::core::mem::transmute(ppr11) };
            ppr11 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr12: u16 = unsafe { ::core::mem::transmute(ppr12) };
            ppr12 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr13: u16 = unsafe { ::core::mem::transmute(ppr13) };
            ppr13 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr14: u16 = unsafe { ::core::mem::transmute(ppr14) };
            ppr14 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr15: u16 = unsafe { ::core::mem::transmute(ppr15) };
            ppr15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr10() {
    assert_eq!(
        ::core::mem::size_of::<un_pr10>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr10))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr10>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr10))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr10>())).pr10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr10),
            "::",
            stringify!(pr10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr10>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr10),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr10l {
    pub pr10l: cty::c_uchar,
    pub BIT: un_pr10l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr10l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr10l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr10l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr10l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr10l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr10l__bindgen_ty_1))
    );
}
impl un_pr10l__bindgen_ty_1 {
    #[inline]
    pub fn wdtipr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_wdtipr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lvipr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lvipr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr12(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr12(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr13(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr13(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr14(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr14(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ppr15(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ppr15(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdtipr1: cty::c_uchar,
        lvipr1: cty::c_uchar,
        ppr10: cty::c_uchar,
        ppr11: cty::c_uchar,
        ppr12: cty::c_uchar,
        ppr13: cty::c_uchar,
        ppr14: cty::c_uchar,
        ppr15: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdtipr1: u8 = unsafe { ::core::mem::transmute(wdtipr1) };
            wdtipr1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let lvipr1: u8 = unsafe { ::core::mem::transmute(lvipr1) };
            lvipr1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ppr10: u8 = unsafe { ::core::mem::transmute(ppr10) };
            ppr10 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ppr11: u8 = unsafe { ::core::mem::transmute(ppr11) };
            ppr11 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ppr12: u8 = unsafe { ::core::mem::transmute(ppr12) };
            ppr12 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ppr13: u8 = unsafe { ::core::mem::transmute(ppr13) };
            ppr13 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ppr14: u8 = unsafe { ::core::mem::transmute(ppr14) };
            ppr14 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ppr15: u8 = unsafe { ::core::mem::transmute(ppr15) };
            ppr15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr10l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr10l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr10l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr10l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr10l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr10l>())).pr10l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr10l),
            "::",
            stringify!(pr10l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr10l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr10l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr10h {
    pub pr10h: cty::c_uchar,
    pub BIT: un_pr10h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr10h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr10h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr10h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr10h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr10h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr10h__bindgen_ty_1))
    );
}
impl un_pr10h__bindgen_ty_1 {
    #[inline]
    pub fn stpr12(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr12(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr12(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr12(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr111h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr111h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmapr11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dmapr11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stpr10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr101h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr101h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stpr12: cty::c_uchar,
        srpr12: cty::c_uchar,
        tmpr111h: cty::c_uchar,
        dmapr10: cty::c_uchar,
        dmapr11: cty::c_uchar,
        stpr10: cty::c_uchar,
        srpr10: cty::c_uchar,
        tmpr101h: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stpr12: u8 = unsafe { ::core::mem::transmute(stpr12) };
            stpr12 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srpr12: u8 = unsafe { ::core::mem::transmute(srpr12) };
            srpr12 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr111h: u8 = unsafe { ::core::mem::transmute(tmpr111h) };
            tmpr111h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dmapr10: u8 = unsafe { ::core::mem::transmute(dmapr10) };
            dmapr10 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dmapr11: u8 = unsafe { ::core::mem::transmute(dmapr11) };
            dmapr11 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let stpr10: u8 = unsafe { ::core::mem::transmute(stpr10) };
            stpr10 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let srpr10: u8 = unsafe { ::core::mem::transmute(srpr10) };
            srpr10 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr101h: u8 = unsafe { ::core::mem::transmute(tmpr101h) };
            tmpr101h as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr10h() {
    assert_eq!(
        ::core::mem::size_of::<un_pr10h>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr10h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr10h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr10h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr10h>())).pr10h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr10h),
            "::",
            stringify!(pr10h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr10h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr10h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr11 {
    pub pr11: cty::c_ushort,
    pub BIT: un_pr11__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_pr11__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_un_pr11__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr11__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr11__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr11__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr11__bindgen_ty_1))
    );
}
impl un_pr11__bindgen_ty_1 {
    #[inline]
    pub fn stpr11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_stpr11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_srpr11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr103h(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr103h(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicapr10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_iicapr10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr100(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr100(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr101(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr101(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr102(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr102(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr103(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_tmpr103(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stpr11: cty::c_ushort,
        srpr11: cty::c_ushort,
        tmpr103h: cty::c_ushort,
        iicapr10: cty::c_ushort,
        tmpr100: cty::c_ushort,
        tmpr101: cty::c_ushort,
        tmpr102: cty::c_ushort,
        tmpr103: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stpr11: u16 = unsafe { ::core::mem::transmute(stpr11) };
            stpr11 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srpr11: u16 = unsafe { ::core::mem::transmute(srpr11) };
            srpr11 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr103h: u16 = unsafe { ::core::mem::transmute(tmpr103h) };
            tmpr103h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicapr10: u16 = unsafe { ::core::mem::transmute(iicapr10) };
            iicapr10 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr100: u16 = unsafe { ::core::mem::transmute(tmpr100) };
            tmpr100 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr101: u16 = unsafe { ::core::mem::transmute(tmpr101) };
            tmpr101 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmpr102: u16 = unsafe { ::core::mem::transmute(tmpr102) };
            tmpr102 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr103: u16 = unsafe { ::core::mem::transmute(tmpr103) };
            tmpr103 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr11() {
    assert_eq!(
        ::core::mem::size_of::<un_pr11>(),
        2usize,
        concat!("Size of: ", stringify!(un_pr11))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr11>(),
        2usize,
        concat!("Alignment of ", stringify!(un_pr11))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr11>())).pr11 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr11),
            "::",
            stringify!(pr11)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr11>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr11),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr11l {
    pub pr11l: cty::c_uchar,
    pub BIT: un_pr11l__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr11l__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr11l__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr11l__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr11l__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr11l__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr11l__bindgen_ty_1))
    );
}
impl un_pr11l__bindgen_ty_1 {
    #[inline]
    pub fn stpr11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr11(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr11(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr103h(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr103h(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iicapr10(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_iicapr10(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr100(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr100(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr101(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr101(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr102(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr102(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr103(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr103(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        stpr11: cty::c_uchar,
        srpr11: cty::c_uchar,
        tmpr103h: cty::c_uchar,
        iicapr10: cty::c_uchar,
        tmpr100: cty::c_uchar,
        tmpr101: cty::c_uchar,
        tmpr102: cty::c_uchar,
        tmpr103: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let stpr11: u8 = unsafe { ::core::mem::transmute(stpr11) };
            stpr11 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let srpr11: u8 = unsafe { ::core::mem::transmute(srpr11) };
            srpr11 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tmpr103h: u8 = unsafe { ::core::mem::transmute(tmpr103h) };
            tmpr103h as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let iicapr10: u8 = unsafe { ::core::mem::transmute(iicapr10) };
            iicapr10 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tmpr100: u8 = unsafe { ::core::mem::transmute(tmpr100) };
            tmpr100 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tmpr101: u8 = unsafe { ::core::mem::transmute(tmpr101) };
            tmpr101 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmpr102: u8 = unsafe { ::core::mem::transmute(tmpr102) };
            tmpr102 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr103: u8 = unsafe { ::core::mem::transmute(tmpr103) };
            tmpr103 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr11l() {
    assert_eq!(
        ::core::mem::size_of::<un_pr11l>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr11l))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr11l>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr11l))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr11l>())).pr11l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr11l),
            "::",
            stringify!(pr11l)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr11l>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr11l),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pr11h {
    pub pr11h: cty::c_uchar,
    pub BIT: un_pr11h__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pr11h__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pr11h__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pr11h__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr11h__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr11h__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr11h__bindgen_ty_1))
    );
}
impl un_pr11h__bindgen_ty_1 {
    #[inline]
    pub fn adpr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_adpr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtcpr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rtcpr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn itpr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_itpr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn krpr1(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_krpr1(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stpr13(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_stpr13(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn srpr13(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_srpr13(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr113(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr113(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tmpr104(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_tmpr104(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        adpr1: cty::c_uchar,
        rtcpr1: cty::c_uchar,
        itpr1: cty::c_uchar,
        krpr1: cty::c_uchar,
        stpr13: cty::c_uchar,
        srpr13: cty::c_uchar,
        tmpr113: cty::c_uchar,
        tmpr104: cty::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let adpr1: u8 = unsafe { ::core::mem::transmute(adpr1) };
            adpr1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtcpr1: u8 = unsafe { ::core::mem::transmute(rtcpr1) };
            rtcpr1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let itpr1: u8 = unsafe { ::core::mem::transmute(itpr1) };
            itpr1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let krpr1: u8 = unsafe { ::core::mem::transmute(krpr1) };
            krpr1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let stpr13: u8 = unsafe { ::core::mem::transmute(stpr13) };
            stpr13 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let srpr13: u8 = unsafe { ::core::mem::transmute(srpr13) };
            srpr13 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tmpr113: u8 = unsafe { ::core::mem::transmute(tmpr113) };
            tmpr113 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tmpr104: u8 = unsafe { ::core::mem::transmute(tmpr104) };
            tmpr104 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pr11h() {
    assert_eq!(
        ::core::mem::size_of::<un_pr11h>(),
        1usize,
        concat!("Size of: ", stringify!(un_pr11h))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pr11h>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pr11h))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr11h>())).pr11h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr11h),
            "::",
            stringify!(pr11h)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pr11h>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pr11h),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mdal {
    pub mdal: cty::c_ushort,
    pub BIT: un_mdal__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mdal__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mdal__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mdal__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdal__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdal__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdal__bindgen_ty_1))
    );
}
impl un_mdal__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mdal() {
    assert_eq!(
        ::core::mem::size_of::<un_mdal>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdal))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdal>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdal))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdal>())).mdal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdal),
            "::",
            stringify!(mdal)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdal>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdal),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mula {
    pub mula: cty::c_ushort,
    pub BIT: un_mula__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mula__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mula__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mula__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mula__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mula__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mula__bindgen_ty_1))
    );
}
impl un_mula__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mula() {
    assert_eq!(
        ::core::mem::size_of::<un_mula>(),
        2usize,
        concat!("Size of: ", stringify!(un_mula))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mula>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mula))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mula>())).mula as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mula),
            "::",
            stringify!(mula)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mula>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mula),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mdah {
    pub mdah: cty::c_ushort,
    pub BIT: un_mdah__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mdah__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mdah__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mdah__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdah__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdah__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdah__bindgen_ty_1))
    );
}
impl un_mdah__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mdah() {
    assert_eq!(
        ::core::mem::size_of::<un_mdah>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdah))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdah>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdah))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdah>())).mdah as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdah),
            "::",
            stringify!(mdah)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdah>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdah),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mulb {
    pub mulb: cty::c_ushort,
    pub BIT: un_mulb__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mulb__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mulb__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mulb__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mulb__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mulb__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mulb__bindgen_ty_1))
    );
}
impl un_mulb__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mulb() {
    assert_eq!(
        ::core::mem::size_of::<un_mulb>(),
        2usize,
        concat!("Size of: ", stringify!(un_mulb))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mulb>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mulb))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mulb>())).mulb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mulb),
            "::",
            stringify!(mulb)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mulb>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mulb),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mdbh {
    pub mdbh: cty::c_ushort,
    pub BIT: un_mdbh__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mdbh__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mdbh__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mdbh__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdbh__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdbh__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdbh__bindgen_ty_1))
    );
}
impl un_mdbh__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mdbh() {
    assert_eq!(
        ::core::mem::size_of::<un_mdbh>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdbh))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdbh>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdbh))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdbh>())).mdbh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdbh),
            "::",
            stringify!(mdbh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdbh>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdbh),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_muloh {
    pub muloh: cty::c_ushort,
    pub BIT: un_muloh__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_muloh__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_muloh__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_muloh__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_muloh__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_muloh__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_muloh__bindgen_ty_1))
    );
}
impl un_muloh__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_muloh() {
    assert_eq!(
        ::core::mem::size_of::<un_muloh>(),
        2usize,
        concat!("Size of: ", stringify!(un_muloh))
    );
    assert_eq!(
        ::core::mem::align_of::<un_muloh>(),
        2usize,
        concat!("Alignment of ", stringify!(un_muloh))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_muloh>())).muloh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_muloh),
            "::",
            stringify!(muloh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_muloh>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_muloh),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mdbl {
    pub mdbl: cty::c_ushort,
    pub BIT: un_mdbl__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mdbl__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mdbl__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mdbl__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdbl__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdbl__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdbl__bindgen_ty_1))
    );
}
impl un_mdbl__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mdbl() {
    assert_eq!(
        ::core::mem::size_of::<un_mdbl>(),
        2usize,
        concat!("Size of: ", stringify!(un_mdbl))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mdbl>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mdbl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdbl>())).mdbl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdbl),
            "::",
            stringify!(mdbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mdbl>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mdbl),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_mulol {
    pub mulol: cty::c_ushort,
    pub BIT: un_mulol__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct un_mulol__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_un_mulol__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_mulol__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(un_mulol__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mulol__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mulol__bindgen_ty_1))
    );
}
impl un_mulol__bindgen_ty_1 {
    #[inline]
    pub fn bit0(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit0(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit1(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit2(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit2(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit3(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit3(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit4(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit5(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit5(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit6(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit6(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit7(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit7(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit8(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit8(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit9(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit9(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit10(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit10(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit11(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit11(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit12(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit12(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit13(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit13(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit14(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit15(&self) -> cty::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_bit15(&mut self, val: cty::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit0: cty::c_ushort,
        bit1: cty::c_ushort,
        bit2: cty::c_ushort,
        bit3: cty::c_ushort,
        bit4: cty::c_ushort,
        bit5: cty::c_ushort,
        bit6: cty::c_ushort,
        bit7: cty::c_ushort,
        bit8: cty::c_ushort,
        bit9: cty::c_ushort,
        bit10: cty::c_ushort,
        bit11: cty::c_ushort,
        bit12: cty::c_ushort,
        bit13: cty::c_ushort,
        bit14: cty::c_ushort,
        bit15: cty::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit0: u16 = unsafe { ::core::mem::transmute(bit0) };
            bit0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1: u16 = unsafe { ::core::mem::transmute(bit1) };
            bit1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit2: u16 = unsafe { ::core::mem::transmute(bit2) };
            bit2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit3: u16 = unsafe { ::core::mem::transmute(bit3) };
            bit3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit4: u16 = unsafe { ::core::mem::transmute(bit4) };
            bit4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bit5: u16 = unsafe { ::core::mem::transmute(bit5) };
            bit5 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bit6: u16 = unsafe { ::core::mem::transmute(bit6) };
            bit6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bit7: u16 = unsafe { ::core::mem::transmute(bit7) };
            bit7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bit8: u16 = unsafe { ::core::mem::transmute(bit8) };
            bit8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bit9: u16 = unsafe { ::core::mem::transmute(bit9) };
            bit9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bit10: u16 = unsafe { ::core::mem::transmute(bit10) };
            bit10 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bit11: u16 = unsafe { ::core::mem::transmute(bit11) };
            bit11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bit12: u16 = unsafe { ::core::mem::transmute(bit12) };
            bit12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bit13: u16 = unsafe { ::core::mem::transmute(bit13) };
            bit13 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bit14: u16 = unsafe { ::core::mem::transmute(bit14) };
            bit14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bit15: u16 = unsafe { ::core::mem::transmute(bit15) };
            bit15 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_mulol() {
    assert_eq!(
        ::core::mem::size_of::<un_mulol>(),
        2usize,
        concat!("Size of: ", stringify!(un_mulol))
    );
    assert_eq!(
        ::core::mem::align_of::<un_mulol>(),
        2usize,
        concat!("Alignment of ", stringify!(un_mulol))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mulol>())).mulol as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mulol),
            "::",
            stringify!(mulol)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_mulol>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_mulol),
            "::",
            stringify!(BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_pmc {
    pub pmc: cty::c_uchar,
    pub BIT: un_pmc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct un_pmc__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_un_pmc__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<un_pmc__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(un_pmc__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pmc__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pmc__bindgen_ty_1))
    );
}
impl un_pmc__bindgen_ty_1 {
    #[inline]
    pub fn maa(&self) -> cty::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_maa(&mut self, val: cty::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(maa: cty::c_uchar) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let maa: u8 = unsafe { ::core::mem::transmute(maa) };
            maa as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_un_pmc() {
    assert_eq!(
        ::core::mem::size_of::<un_pmc>(),
        1usize,
        concat!("Size of: ", stringify!(un_pmc))
    );
    assert_eq!(
        ::core::mem::align_of::<un_pmc>(),
        1usize,
        concat!("Alignment of ", stringify!(un_pmc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pmc>())).pmc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pmc),
            "::",
            stringify!(pmc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<un_pmc>())).BIT as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(un_pmc),
            "::",
            stringify!(BIT)
        )
    );
}

